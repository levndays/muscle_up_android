Flutter Project Snapshot (Python Script)
Project Root: C:\Users\levndays\Desktop\muscle_up
Snapshot created on: 2025-05-29T00:06:16.862249
================================================================================

=== FILE: .flutter-plugins-dependencies ===
--------------------------------------------------
{"info":"This is a generated file; do not edit or check into version control.","plugins":{"ios":[{"name":"cloud_firestore","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\cloud_firestore-5.6.8\\\\","native_build":true,"dependencies":["firebase_core"],"dev_dependency":false},{"name":"firebase_auth","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_auth-5.5.4\\\\","native_build":true,"dependencies":["firebase_core"],"dev_dependency":false},{"name":"firebase_core","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_core-3.13.1\\\\","native_build":true,"dependencies":[],"dev_dependency":false},{"name":"google_sign_in_ios","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\google_sign_in_ios-5.9.0\\\\","shared_darwin_source":true,"native_build":true,"dependencies":[],"dev_dependency":false}],"android":[{"name":"cloud_firestore","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\cloud_firestore-5.6.8\\\\","native_build":true,"dependencies":["firebase_core"],"dev_dependency":false},{"name":"firebase_auth","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_auth-5.5.4\\\\","native_build":true,"dependencies":["firebase_core"],"dev_dependency":false},{"name":"firebase_core","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_core-3.13.1\\\\","native_build":true,"dependencies":[],"dev_dependency":false},{"name":"google_sign_in_android","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\google_sign_in_android-6.2.1\\\\","native_build":true,"dependencies":[],"dev_dependency":false}],"macos":[{"name":"cloud_firestore","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\cloud_firestore-5.6.8\\\\","native_build":true,"dependencies":["firebase_core"],"dev_dependency":false},{"name":"firebase_auth","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_auth-5.5.4\\\\","native_build":true,"dependencies":["firebase_core"],"dev_dependency":false},{"name":"firebase_core","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_core-3.13.1\\\\","native_build":true,"dependencies":[],"dev_dependency":false},{"name":"google_sign_in_ios","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\google_sign_in_ios-5.9.0\\\\","shared_darwin_source":true,"native_build":true,"dependencies":[],"dev_dependency":false}],"linux":[],"windows":[{"name":"cloud_firestore","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\cloud_firestore-5.6.8\\\\","native_build":true,"dependencies":["firebase_core"],"dev_dependency":false},{"name":"firebase_auth","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_auth-5.5.4\\\\","native_build":true,"dependencies":["firebase_core"],"dev_dependency":false},{"name":"firebase_core","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_core-3.13.1\\\\","native_build":true,"dependencies":[],"dev_dependency":false}],"web":[{"name":"cloud_firestore_web","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\cloud_firestore_web-4.4.8\\\\","dependencies":["firebase_core_web"],"dev_dependency":false},{"name":"firebase_auth_web","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_auth_web-5.14.3\\\\","dependencies":["firebase_core_web"],"dev_dependency":false},{"name":"firebase_core_web","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_core_web-2.23.0\\\\","dependencies":[],"dev_dependency":false},{"name":"google_sign_in_web","path":"C:\\\\Users\\\\levndays\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\google_sign_in_web-0.12.4+4\\\\","dependencies":[],"dev_dependency":false}]},"dependencyGraph":[{"name":"cloud_firestore","dependencies":["cloud_firestore_web","firebase_core"]},{"name":"cloud_firestore_web","dependencies":["firebase_core","firebase_core_web"]},{"name":"firebase_auth","dependencies":["firebase_auth_web","firebase_core"]},{"name":"firebase_auth_web","dependencies":["firebase_core","firebase_core_web"]},{"name":"firebase_core","dependencies":["firebase_core_web"]},{"name":"firebase_core_web","dependencies":[]},{"name":"google_sign_in","dependencies":["google_sign_in_android","google_sign_in_ios","google_sign_in_web"]},{"name":"google_sign_in_android","dependencies":[]},{"name":"google_sign_in_ios","dependencies":[]},{"name":"google_sign_in_web","dependencies":[]}],"date_created":"2025-05-28 23:03:11.235073","version":"3.32.0","swift_package_manager_enabled":{"ios":false,"macos":false}}
--------------------------------------------------
=== END OF FILE: .flutter-plugins-dependencies ===


=== FILE: .gitignore ===
--------------------------------------------------
# Miscellaneous
*.class
*.log
*.pyc
*.swp
.DS_Store
.atom/
.build/
.buildlog/
.history
.svn/
.swiftpm/
migrate_working_dir/

# IntelliJ related
*.iml
*.ipr
*.iws
.idea/

# The .vscode folder contains launch configuration and tasks you configure in
# VS Code which you may wish to be included in version control, so this line
# is commented out by default.
#.vscode/

# Flutter/Dart/Pub related
**/doc/api/
**/ios/Flutter/.last_build_id
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.pub-cache/
.pub/
/build/

# Symbolication related
app.*.symbols

# Obfuscation related
app.*.map.json

# Android Studio will place build artifacts here
/android/app/debug
/android/app/profile
/android/app/release

--------------------------------------------------
=== END OF FILE: .gitignore ===


=== FILE: .metadata ===
--------------------------------------------------
# This file tracks properties of this Flutter project.
# Used by Flutter tool to assess capabilities and perform upgrades etc.
#
# This file should be version controlled and should not be manually edited.

version:
  revision: "be698c48a6750c8cb8e61c740ca9991bb947aba2"
  channel: "stable"

project_type: app

# Tracks metadata for the flutter migrate command
migration:
  platforms:
    - platform: root
      create_revision: be698c48a6750c8cb8e61c740ca9991bb947aba2
      base_revision: be698c48a6750c8cb8e61c740ca9991bb947aba2
    - platform: android
      create_revision: be698c48a6750c8cb8e61c740ca9991bb947aba2
      base_revision: be698c48a6750c8cb8e61c740ca9991bb947aba2
    - platform: ios
      create_revision: be698c48a6750c8cb8e61c740ca9991bb947aba2
      base_revision: be698c48a6750c8cb8e61c740ca9991bb947aba2
    - platform: linux
      create_revision: be698c48a6750c8cb8e61c740ca9991bb947aba2
      base_revision: be698c48a6750c8cb8e61c740ca9991bb947aba2
    - platform: macos
      create_revision: be698c48a6750c8cb8e61c740ca9991bb947aba2
      base_revision: be698c48a6750c8cb8e61c740ca9991bb947aba2
    - platform: web
      create_revision: be698c48a6750c8cb8e61c740ca9991bb947aba2
      base_revision: be698c48a6750c8cb8e61c740ca9991bb947aba2
    - platform: windows
      create_revision: be698c48a6750c8cb8e61c740ca9991bb947aba2
      base_revision: be698c48a6750c8cb8e61c740ca9991bb947aba2

  # User provided section

  # List of Local paths (relative to this file) that should be
  # ignored by the migrate tool.
  #
  # Files that are not part of the templates will be ignored by default.
  unmanaged_files:
    - 'lib/main.dart'
    - 'ios/Runner.xcodeproj/project.pbxproj'

--------------------------------------------------
=== END OF FILE: .metadata ===


=== FILE: analysis_options.yaml ===
--------------------------------------------------
include: package:flutter_lints/flutter.yaml

--------------------------------------------------
=== END OF FILE: analysis_options.yaml ===


=== FILE: create_snapshot.py ===
--------------------------------------------------
import os
import datetime

# --- Configuration ---
# Defaults to the current directory where the script is run
DEFAULT_PROJECT_ROOT = os.getcwd()
DEFAULT_OUTPUT_FILE = "project_snapshot_py.txt"

EXCLUDED_FOLDERS_AND_FILES = [
    # Common VCS
    ".git",
    ".hg",
    ".svn",
    # IDE and editor specific
    ".idea",
    ".vscode",
    # Flutter/Dart specific build/tooling
    ".dart_tool",
    "build",
    # iOS specific
    "ios/Pods",
    "ios/.symlinks",
    "ios/Flutter/App.framework",
    "ios/Flutter/Flutter.framework",
    "ios/Flutter/engine",
    "ios/DerivedData",
    "ios/Runner/Assets.xcassets", # Often contains many images
    "ios/Runner.xcworkspace/xcuserdata",
    # Android specific
    "android/.gradle",
    "android/.idea",
    "android/app/build",
    "android/build",
    "android/key.properties", # Sensitive
    "android/local.properties", # Local paths
    "android/gradlew", # Executable
    "android/gradlew.bat", # Executable
    "android/gradle/wrapper/gradle-wrapper.jar", # Binary
    # Other platform specific build artifacts
    "linux/flutter/ephemeral",
    "macos/flutter/ephemeral",
    "windows/flutter/ephemeral",
    "web/build",
    # Common generated or lock files
    "pubspec.lock",
    "*.iml", ".ipr", ".iws", # IntelliJ
    # Specific files to exclude
    DEFAULT_OUTPUT_FILE # Don't include the output file itself if run multiple times
]

# Exclude file extensions (mostly binary, assets, or irrelevant for code review)
EXCLUDED_EXTENSIONS = [
    # Common binary/asset types
    ".png", ".jpg", ".jpeg", ".gif", ".svg", ".webp", # Images
    ".ico",
    ".mp3", ".wav", ".ogg", ".m4a",                  # Audio
    ".mp4", ".mov", ".avi", ".webm",                 # Video
    ".ttf", ".otf", ".woff", ".woff2",                # Fonts
    ".zip", ".gz", ".tar", ".rar", ".7z",             # Archives
    ".a", ".so", ".dll", ".exe", ".obj", ".o", ".dylib", # Compiled binaries
    ".jar", ".class",
    ".keystore", ".jks",                             # Keystores
    ".log",
    ".DS_Store",                                     # macOS
    ".swp", ".swo",                                  # Vim swap files
    # Consider if you want to exclude assets folder content based on extensions
    # or exclude the entire 'assets/' folder by adding it to EXCLUDED_FOLDERS_AND_FILES
]

def should_exclude(path, project_root):
    """Checks if a given path (file or directory) should be excluded."""
    relative_path = os.path.relpath(path, project_root).replace(os.sep, '/')

    # 1. Check against excluded folders and specific files
    for excluded_item in EXCLUDED_FOLDERS_AND_FILES:
        if relative_path.startswith(excluded_item + '/') or relative_path == excluded_item:
            return True

    # 2. If it's a file, check its extension
    if os.path.isfile(path):
        _, ext = os.path.splitext(path)
        if ext.lower() in EXCLUDED_EXTENSIONS:
            return True
    return False

def create_project_snapshot(project_root=DEFAULT_PROJECT_ROOT, output_file_name=DEFAULT_OUTPUT_FILE):
    """
    Walks through the project directory, collects relevant file contents,
    and writes them to a single output file.
    """
    output_file_path = os.path.join(project_root, output_file_name)
    # Add the dynamic output file name to excluded items to prevent self-inclusion
    if output_file_name not in EXCLUDED_FOLDERS_AND_FILES:
        EXCLUDED_FOLDERS_AND_FILES.append(output_file_name)


    print(f"Project Root: {project_root}")
    print(f"Output File: {output_file_path}")

    with open(output_file_path, "w", encoding="utf-8", errors="ignore") as outfile:
        outfile.write("Flutter Project Snapshot (Python Script)\n")
        outfile.write(f"Project Root: {project_root}\n")
        outfile.write(f"Snapshot created on: {datetime.datetime.now().isoformat()}\n")
        outfile.write("=" * 80 + "\n\n")

        for root, dirs, files in os.walk(project_root, topdown=True):
            # --- Directory Exclusion ---
            # Modify dirs in-place to prevent os.walk from traversing into them
            dirs[:] = [d for d in dirs if not should_exclude(os.path.join(root, d), project_root)]

            for filename in files:
                filepath = os.path.join(root, filename)
                if should_exclude(filepath, project_root):
                    continue

                relative_filepath = os.path.relpath(filepath, project_root).replace(os.sep, '/')
                print(f"Processing: {relative_filepath}")

                outfile.write(f"=== FILE: {relative_filepath} ===\n")
                outfile.write("-" * 50 + "\n")
                try:
                    with open(filepath, "r", encoding="utf-8", errors="ignore") as infile:
                        outfile.write(infile.read())
                except Exception as e:
                    outfile.write(f"[Error reading file: {e}]\n")
                outfile.write("\n" + "-" * 50 + "\n")
                outfile.write(f"=== END OF FILE: {relative_filepath} ===\n\n\n")

        outfile.write("=" * 80 + "\n")
        outfile.write("Snapshot Complete.\n")

    print(f"Project snapshot created: {output_file_path}")

if __name__ == "__main__":
    # You can customize the project root and output file name here if needed
    # For example, if your script is not in the project root:
    # current_project_path = r"C:\Users\levndays\Desktop\muscle_up"
    # create_project_snapshot(project_root=current_project_path)

    # By default, uses the directory where the script is run as the project root
    create_project_snapshot()
--------------------------------------------------
=== END OF FILE: create_snapshot.py ===


=== FILE: firebase.json ===
--------------------------------------------------
{"flutter":{"platforms":{"android":{"default":{"projectId":"muscle-up-8c275","appId":"1:1012783717502:android:2f7ce9326b23c730938c2f","fileOutput":"android/app/google-services.json"}},"dart":{"lib/firebase_options.dart":{"projectId":"muscle-up-8c275","configurations":{"android":"1:1012783717502:android:2f7ce9326b23c730938c2f","ios":"1:1012783717502:ios:debb2939085adc3f938c2f","macos":"1:1012783717502:ios:debb2939085adc3f938c2f","web":"1:1012783717502:web:89f5605ac9ecd155938c2f","windows":"1:1012783717502:web:a6ef83f4982ba06e938c2f"}}}}}}
--------------------------------------------------
=== END OF FILE: firebase.json ===


=== FILE: muscle_up.iml ===
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/lib" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/test" isTestSource="true" />
      <excludeFolder url="file://$MODULE_DIR$/.dart_tool" />
      <excludeFolder url="file://$MODULE_DIR$/.idea" />
      <excludeFolder url="file://$MODULE_DIR$/build" />
    </content>
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="Dart SDK" level="project" />
    <orderEntry type="library" name="Flutter Plugins" level="project" />
    <orderEntry type="library" name="Dart Packages" level="project" />
  </component>
</module>

--------------------------------------------------
=== END OF FILE: muscle_up.iml ===


=== FILE: pubspec.yaml ===
--------------------------------------------------
name: muscle_up
description: "Next-gen Fitness App. New height, New companions."
publish_to: 'none' 
version: 0.1.0

environment:
  sdk: ^3.8.0 

dependencies:
  flutter:
    sdk: flutter
  firebase_core: ^3.13.1
  firebase_auth: ^5.5.4
  google_sign_in: ^6.2.1
  cloud_firestore: ^5.6.8
  animated_background: ^2.0.0
  flutter_bloc: ^9.1.1  
  equatable: ^2.0.5
  intl: ^0.19.0

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^5.0.0
  flutter_launcher_icons: ^0.13.1

flutter_launcher_icons:
  android: "launcher_icon" 
  ios: true               
  image_path: "assets/images/app_icon.png" 
  min_sdk_android: 23  
  # web:
  #   generate: true
  #   image_path: "assets/images/app_icon_web.png"
  #   background_color: "#ED5D1A" 
  #   theme_color: "#ED5D1A"     
  # windows:
  #   generate: true
  #   image_path: "assets/images/app_icon_windows.png"
  #   icon_size: 48 
  # macos:
  #   generate: true
  #   image_path: "assets/images/app_icon_macos.png"

flutter:
  uses-material-design: true

  assets:
    - assets/images/ 
    - assets/fonts/ # Переконайтесь, що ця папка містить ваші шрифти

  fonts:
    - family: Inter
      fonts:
        - asset: assets/fonts/Inter_18pt-Regular.ttf
        - asset: assets/fonts/Inter_18pt-Italic.ttf
          style: italic
        - asset: assets/fonts/Inter_18pt-Light.ttf
          weight: 300
        - asset: assets/fonts/Inter_18pt-Medium.ttf
          weight: 500
        - asset: assets/fonts/Inter_18pt-SemiBold.ttf
          weight: 600
        - asset: assets/fonts/Inter_18pt-Bold.ttf
          weight: 700
        - asset: assets/fonts/Inter_18pt-ExtraBold.ttf
          weight: 800
        - asset: assets/fonts/Inter_18pt-Black.ttf
          weight: 900
          
    - family: IBMPlexMono  # <--- ДОДАНО НОВИЙ ШРИФТ
      fonts:
        - asset: assets/fonts/IBMPlexMono-Regular.ttf
          # weight: 400 # (опціонально, якщо це звичайне накреслення)
        - asset: assets/fonts/IBMPlexMono-Bold.ttf
          weight: 700 # (для Bold накреслення)
        # - asset: assets/fonts/IBMPlexMono-Italic.ttf # (приклад, якщо є)
        #   style: italic
        # - asset: assets/fonts/IBMPlexMono-BoldItalic.ttf # (приклад, якщо є)
        #   weight: 700
        #   style: italic
        # - asset: assets/fonts/IBMPlexMono-Light.ttf # (приклад, якщо є)
        #   weight: 300
        # ... додайте інші накреслення IBM Plex Mono за потреби
--------------------------------------------------
=== END OF FILE: pubspec.yaml ===


=== FILE: README.md ===
--------------------------------------------------
# MuscleUP: Фітнес-застосунок для справжніх атлетів

**Motto:** Level Up Your Lifts, Connect Your Crew, Achieve Your Goals. Build Your Strength, Together.

## 1. Вступ

**MuscleUP** – це мобільний фітнес-застосунок, розроблений для підвищення мотивації та довгострокової залученості користувачів до тренувального процесу. Застосунок дозволяє відстежувати тренування, встановлювати фітнес-цілі, ділитися прогресом (в майбутньому) та отримувати підтримку від спільноти (в майбутньому).

**Поточний стан (розширена версія 0.1.x):**
На даному етапі реалізовано наступний функціонал:
*   Автентифікація користувачів (Email/Password та Google Sign-In).
*   Створення початкового профілю користувача в Cloud Firestore після першої реєстрації.
*   **Новий екран "Profile Setup"** для введення додаткових даних (username, стать, вага, зріст, цілі тощо) після першого входу, якщо профіль не завершено (`profileSetupComplete: false`).
*   **Оновлений `HomePage`** як центральний хаб з AppBar, BottomNavigationBar та FloatingActionButton (для "Start Workout", відображається тільки на дашборді).
*   **Інтерактивний `DashboardScreen`** як головний екран, що відображає вітання, статистику (плейсхолдери), сповіщення (плейсхолдери) та має навігацію до Профілю та Прогресу через тап-зони.
*   Перегляд бібліотеки стандартизованих вправ (`ExerciseExplorerScreen`).
*   Створення, перегляд, редагування та видалення користувацьких тренувальних рутин (`UserRoutinesScreen`, `CreateEditRoutineScreen`).
*   Розширена модель користувача `UserProfile` для зберігання додаткових даних.
*   Репозиторії та Cubit'и для управління профілем, вправами та рутинами.

## 2. Ключові Архітектурні Принципи

*   **Модульність:** Застосунок розроблено за принципом "feature-first", де кожна функціональна частина є окремим модулем (наприклад, `auth`, `profile_setup`, `exercise_explorer`, `routines`, `dashboard`).
*   **Чітке Розділення Відповідальностей:** Використання шарів (Domain, Data, Presentation) в межах кожного модуля.
*   **Управління Станом:** Застосування Flutter BLoC/Cubit для управління станом UI та бізнес-логіки.
*   **Залежності:** Використання `RepositoryProvider` для надання залежностей репозиторіїв (та `FirebaseAuth`) віджетам.
*   **Масштабованість:** Архітектура передбачає легке додавання нових функцій та розширення існуючих.

## 3. Технологічний Стек

*   **Фронтенд:**
    *   **Framework:** Flutter (`^3.8.0` Dart SDK, згідно `pubspec.yaml`)
    *   **Мова:** Dart
    *   **Управління станом:** Flutter BLoC/Cubit (`flutter_bloc: ^9.1.1`)
    *   **Порівняння об'єктів:** Equatable (`equatable: ^2.0.5`)
    *   **Форматування дати:** `intl: ^0.19.0`
    *   **Анімації:** `animated_background: ^2.0.0` (для сторінки логіну)
    *   **Навігація:** Стандартна Flutter навігація (`MaterialPageRoute`, `Navigator.push/pop/pushAndRemoveUntil`).
*   **Бекенд (Firebase):**
    *   **Firebase Core:** `firebase_core: ^3.13.1`
    *   **Firebase Authentication:** `firebase_auth: ^5.5.4` (Email/Password, Google Sign-In)
    *   **Google Sign-In:** `google_sign_in: ^6.2.1`
    *   **Cloud Firestore:** `cloud_firestore: ^5.6.8` (NoSQL база даних)
    *   **Firebase Storage:** (Планується) для медіафайлів.
    *   **Cloud Functions:** (Планується) для серверної логіки.
*   **Інструменти розробки:**
    *   **Лінтер:** `flutter_lints: ^5.0.0`

## 4. Структура Проєкту (`lib/`)


muscle_up/
├── lib/
│ ├── main.dart             # Точка входу, ініціалізація Firebase, MaterialApp, RepositoryProviders
│ ├── auth_gate.dart        # Керування потоком автентифікації та перевіркою `profileSetupComplete`
│ ├── firebase_options.dart # Конфігурація Firebase (згенеровано)
│ ├── home_page.dart        # ГОЛОВНИЙ ЕКРАН: AppBar, BottomNavigationBar, FAB, керування вкладками
│ ├── login_page.dart       # Екран входу/реєстрації, анімований фон
│ │
│ ├── core/
│ │ └── domain/
│ │   ├── entities/
│ │   │ ├── predefined_exercise.dart # Модель для стандартизованої вправи
│ │   │ ├── routine.dart             # Моделі UserRoutine та RoutineExercise
│ │   │ └── user_profile.dart      # Модель для профілю користувача (НОВА)
│ │   └── repositories/
│ │     ├── predefined_exercise_repository.dart # Абстракція репозиторію вправ
│ │     ├── routine_repository.dart             # Абстракція репозиторію рутин
│ │     └── user_profile_repository.dart      # Абстракція репозиторію профілю (НОВА)
│ │
│ └── features/ # Кожен модуль фічі
│   ├── dashboard/
│   │ └── presentation/
│   │   └── screens/
│   │     └── dashboard_screen.dart # UI для головного екрану/дашборду (вміст для HomePage)
│   │
│   ├── exercise_explorer/
│   │   ├── data/
│   │   │ └── repositories/
│   │   │   └── predefined_exercise_repository_impl.dart
│   │   └── presentation/
│   │     ├── cubit/
│   │     │   ├── exercise_explorer_cubit.dart
│   │     │   └── exercise_explorer_state.dart
│   │     ├── screens/
│   │     │   └── exercise_explorer_screen.dart # UI для вкладки "Exercises" (вміст для HomePage)
│   │     └── widgets/
│   │       └── exercise_list_item.dart
│   │
│   ├── routines/
│   │   ├── data/
│   │   │ └── repositories/
│   │   │   └── routine_repository_impl.dart
│   │   └── presentation/
│   │     ├── cubit/
│   │     │   ├── manage_routine_cubit.dart
│   │     │   ├── manage_routine_state.dart
│   │     │   ├── user_routines_cubit.dart
│   │     │   └── user_routines_state.dart
│   │     ├── screens/
│   │     │   ├── create_edit_routine_screen.dart # Окремий екран
│   │     │   └── user_routines_screen.dart     # UI для вкладки "Routines" (вміст для HomePage)
│   │     └── widgets/
│   │       ├── add_exercise_to_routine_dialog.dart
│   │       └── routine_list_item.dart
│   │
│   └── profile_setup/ # НОВИЙ МОДУЛЬ
│     ├── data/
│     │ └── repositories/
│     │   └── user_profile_repository_impl.dart
│     └── presentation/
│       ├── cubit/
│       │   ├── profile_setup_cubit.dart
│       │   └── profile_setup_state.dart
│       └── screens/
│         └── profile_setup_screen.dart # Екран для введення додаткових даних профілю
│
│ # Додаткові екрани для вкладок (можуть бути винесені в окремі фічі пізніше)
│ # Наразі PostsScreen, ProgressScreen, ProfileScreen можуть бути простими StatelessWidget
│ # всередині home_page.dart або переміщені до своїх фіч.
│
├── assets/
│ ├── images/
│ │ └── google_logo.png
│ └── fonts/
│   ├── Inter_...ttf
│   └── IBMPlexMono_...ttf
│
├── android/ # Специфічний код для Android
├── ios/     # Специфічний код для iOS
└── web/     # Специфічний код для Web


## 5. Детальний Опис Ключових Компонентів

### 5.1. Автентифікація та Налаштування Профілю

*   **`main.dart`**: Ініціалізує Firebase. Надає репозиторії (`PredefinedExerciseRepository`, `RoutineRepository`, `UserProfileRepository`) та `FirebaseAuth` через `MultiRepositoryProvider`. Визначає `MaterialApp` з глобальною темою та шрифтами.
*   **`LoginPage` (`login_page.dart`)**:
    *   UI для входу та реєстрації.
    *   **`_createInitialUserProfile(User user)`**: Після успішної першої реєстрації створює документ для користувача в колекції `users` Firestore з полем `profileSetupComplete: false` та іншими полями за замовчуванням.
*   **`AuthGate` (`auth_gate.dart`)**:
    *   Використовує `StreamBuilder` для `FirebaseAuth.instance.authStateChanges()`.
    *   Якщо користувач увійшов, викликає `_ProfileCheckGate`.
    *   `_ProfileCheckGate`: Використовує `FutureBuilder` для отримання `UserProfile` з Firestore.
        *   Якщо `profileSetupComplete == true`, перенаправляє на `HomePage`.
        *   Якщо `profileSetupComplete == false` (або профіль ще не створено повністю), перенаправляє на `ProfileSetupScreen`.
*   **`ProfileSetupScreen` (`features/profile_setup/.../profile_setup_screen.dart`)**:
    *   Екран з формою для введення додаткових даних користувача (username, стать, вага, зріст, цілі тощо).
    *   Використовує `ProfileSetupCubit` для управління станом форми та збереження даних.
    *   Після успішного збереження оновлює `profileSetupComplete` на `true` в Firestore та перенаправляє на `HomePage`.
*   **`UserProfileCubit` (планується/потрібен)**: Кубіт для завантаження та надання актуальних даних `UserProfile` іншим частинам додатку, наприклад, `DashboardScreen`.

### 5.2. Головний Екран (`HomePage` та `DashboardScreen`)

*   **`HomePage` (`home_page.dart`)**:
    *   `StatefulWidget` з централізованим `AppBar` (з назвою "MuscleUP"), `BottomNavigationBar` та `FloatingActionButton` ("START WORKOUT").
    *   Керує відображенням контенту залежно від обраної вкладки або стану (показ дашборду).
    *   `_selectedIndex = -1` відповідає за відображення `DashboardScreen`.
    *   Інші індекси відповідають за екрани вкладок: `UserRoutinesScreen`, `PostsScreen`, `ProgressScreen`, `ProfileScreen`.
*   **`DashboardScreen` (`features/dashboard/.../dashboard_screen.dart`)**:
    *   Відображає вітальне повідомлення, використовуючи дані користувача (планується з `UserProfileCubit`).
    *   Містить плейсхолдери для статистики та сповіщень.
    *   Має інтерактивні зони (вітання, іконка "вогника") для навігації на екрани Профілю та Прогресу (через колбеки з `HomePage`).
    *   **Не має власного `Scaffold` чи `AppBar`**, оскільки є частиною `HomePage`.

### 5.3. Модуль "Exercise Explorer" (`features/exercise_explorer/`)

*   **`ExerciseExplorerScreen`**: Відображає список стандартизованих вправ. Може працювати в режимі вибору для додавання до рутини. **Не має власного `AppBar`**, якщо використовується як вкладка в `HomePage`.

### 5.4. Модуль "Routines" (`features/routines/`)

*   **`UserRoutinesScreen`**: Відображає список користувацьких рутин. **Не має власного `AppBar`**, якщо використовується як вкладка. Має FAB для переходу на `CreateEditRoutineScreen`.
*   **`CreateEditRoutineScreen`**: Окремий екран для створення/редагування рутини. **Має власний `Scaffold` та `AppBar`**.

## 6. Структура Бекенду (Firebase)

### 6.1. Firebase Authentication
*   Управління користувачами (Email/Password, Google Sign-In).

### 6.2. Cloud Firestore

*   **`users/{userId}`**:
    *   Поля: `uid`, `email`, `displayName?`, `profilePictureUrl?`, `username?`, `gender?`, `dateOfBirth?` (Timestamp), `heightCm?` (double), `weightKg?` (double), `fitnessGoal?`, `activityLevel?`, `xp`, `level`, `profileSetupComplete` (boolean), `createdAt` (Timestamp), `updatedAt` (Timestamp), та інші.
*   **`predefinedExercises`**: (Структура без змін з попереднього README)
*   **`userRoutines`**: (Структура без змін з попереднього README)

## 7. Налаштування та Запуск Проєкту

(Цей розділ залишається переважно без змін, але переконайтеся, що всі кроки Firebase CLI та налаштування Google Sign-In виконані)

1.  **Передумови**: Flutter SDK, Firebase CLI.
2.  **Клонування Репозиторію**.
3.  **Налаштування Firebase**: `flutterfire configure`, `google-services.json` (Android), `GoogleService-Info.plist` (iOS).
4.  **Налаштування Google Sign-In**: SHA-1 відбитки (Android), URL Scheme (iOS).
5.  **Встановлення Залежностей**: `flutter pub get` (переконайтеся, що `intl` додано до `pubspec.yaml`).
6.  **Запуск Застосунку**: `flutter run`.

## 8. Подальший Розвиток

*   **Реалізація `UserProfileCubit`** для завантаження даних профілю та їх використання в `DashboardScreen` та інших місцях.
*   **Завершення екранів "Posts", "Progress", "Profile"** з відповідним функціоналом.
*   **Логування Тренувань:** Реалізація запису виконаних сетів, повторень, ваги.
*   **Розширений Дашборд:** Відображення реальної статистики та прогресу.
*   **Гейміфікація:** Повноцінна система XP, рівнів, досягнень, стріків.
*   **Соціальні Функції:** Стрічка активності, підписки, коментарі.
*   **Firebase Storage:** Інтеграція для завантаження зображень профілю.
*   **Cloud Functions:** Розробка функцій для фонових задач (наприклад, перевірка унікальності `username`).
*   **Тестування:** Написання unit, widget та integration тестів.
*   **Покращення UI/UX:** Подальше вдосконалення дизайну.
--------------------------------------------------
=== END OF FILE: README.md ===


=== FILE: android/.gitignore ===
--------------------------------------------------
gradle-wrapper.jar
/.gradle
/captures/
/gradlew
/gradlew.bat
/local.properties
GeneratedPluginRegistrant.java
.cxx/

# Remember to never publicly share your keystore.
# See https://flutter.dev/to/reference-keystore
key.properties
**/*.keystore
**/*.jks

--------------------------------------------------
=== END OF FILE: android/.gitignore ===


=== FILE: android/build.gradle.kts ===
--------------------------------------------------
allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

val newBuildDir: Directory = rootProject.layout.buildDirectory.dir("../../build").get()
rootProject.layout.buildDirectory.value(newBuildDir)

subprojects {
    val newSubprojectBuildDir: Directory = newBuildDir.dir(project.name)
    project.layout.buildDirectory.value(newSubprojectBuildDir)
}
subprojects {
    project.evaluationDependsOn(":app")
}

tasks.register<Delete>("clean") {
    delete(rootProject.layout.buildDirectory)
}

--------------------------------------------------
=== END OF FILE: android/build.gradle.kts ===


=== FILE: android/gradle.properties ===
--------------------------------------------------
org.gradle.jvmargs=-Xmx8G -XX:MaxMetaspaceSize=4G -XX:ReservedCodeCacheSize=512m -XX:+HeapDumpOnOutOfMemoryError
android.useAndroidX=true
android.enableJetifier=true

--------------------------------------------------
=== END OF FILE: android/gradle.properties ===


=== FILE: android/muscle_up_android.iml ===
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="FacetManager">
    <facet type="android" name="Android">
      <configuration>
        <option name="ALLOW_USER_CONFIGURATION" value="false" />
        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/app/src/main/AndroidManifest.xml" />
        <option name="RES_FOLDER_RELATIVE_PATH" value="/app/src/main/res" />
        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/app/src/main/assets" />
        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/app/src/main/libs" />
        <option name="PROGUARD_LOGS_FOLDER_RELATIVE_PATH" value="/app/src/main/proguard_logs" />
      </configuration>
    </facet>
  </component>
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/app/src/main/java" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/app/src/main/kotlin" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" generated="true" />
    </content>
    <orderEntry type="jdk" jdkName="Android API 29 Platform" jdkType="Android SDK" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="Flutter for Android" level="project" />
    <orderEntry type="library" name="KotlinJavaRuntime" level="project" />
  </component>
</module>

--------------------------------------------------
=== END OF FILE: android/muscle_up_android.iml ===


=== FILE: android/settings.gradle.kts ===
--------------------------------------------------
pluginManagement {
    val flutterSdkPath = run {
        val properties = java.util.Properties()
        file("local.properties").inputStream().use { properties.load(it) }
        val flutterSdkPath = properties.getProperty("flutter.sdk")
        require(flutterSdkPath != null) { "flutter.sdk not set in local.properties" }
        flutterSdkPath
    }

    includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id("dev.flutter.flutter-plugin-loader") version "1.0.0"
    id("com.android.application") version "8.7.3" apply false
    // START: FlutterFire Configuration
    id("com.google.gms.google-services") version("4.3.15") apply false
    // END: FlutterFire Configuration
    id("org.jetbrains.kotlin.android") version "2.1.0" apply false
}

include(":app")

--------------------------------------------------
=== END OF FILE: android/settings.gradle.kts ===


=== FILE: android/app/build.gradle.kts ===
--------------------------------------------------
plugins {
    id("com.android.application")
    // START: FlutterFire Configuration
    id("com.google.gms.google-services")
    // END: FlutterFire Configuration
    id("kotlin-android")
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id("dev.flutter.flutter-gradle-plugin")
}

android {
    namespace = "com.example.muscle_up"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.muscle_up"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion.coerceAtLeast(23)
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.getByName("debug")
        }
    }
}

flutter {
    source = "../.."
}

--------------------------------------------------
=== END OF FILE: android/app/build.gradle.kts ===


=== FILE: android/app/google-services.json ===
--------------------------------------------------
{
  "project_info": {
    "project_number": "1012783717502",
    "project_id": "muscle-up-8c275",
    "storage_bucket": "muscle-up-8c275.firebasestorage.app"
  },
  "client": [
    {
      "client_info": {
        "mobilesdk_app_id": "1:1012783717502:android:2f7ce9326b23c730938c2f",
        "android_client_info": {
          "package_name": "com.example.muscle_up"
        }
      },
      "oauth_client": [
        {
          "client_id": "1012783717502-sp0ocdvt826a594m08u2a67674t84pmd.apps.googleusercontent.com",
          "client_type": 1,
          "android_info": {
            "package_name": "com.example.muscle_up",
            "certificate_hash": "5f64da5e6979bd16c2ad006d7fc2c05c63be05fe"
          }
        },
        {
          "client_id": "1012783717502-kc8pdm9fisavd2bvmp86svfn2kob6hp5.apps.googleusercontent.com",
          "client_type": 3
        }
      ],
      "api_key": [
        {
          "current_key": "AIzaSyCnwYrzMP3nVK_bpX86pgItzDt-FK77NX8"
        }
      ],
      "services": {
        "appinvite_service": {
          "other_platform_oauth_client": [
            {
              "client_id": "1012783717502-kc8pdm9fisavd2bvmp86svfn2kob6hp5.apps.googleusercontent.com",
              "client_type": 3
            },
            {
              "client_id": "1012783717502-9ii5tn4ulcq8qv6rvh0ril514pdcm50l.apps.googleusercontent.com",
              "client_type": 2,
              "ios_info": {
                "bundle_id": "com.example.muscleUp"
              }
            }
          ]
        }
      }
    }
  ],
  "configuration_version": "1"
}
--------------------------------------------------
=== END OF FILE: android/app/google-services.json ===


=== FILE: android/app/src/debug/AndroidManifest.xml ===
--------------------------------------------------
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- The INTERNET permission is required for development. Specifically,
         the Flutter tool needs it to communicate with the running application
         to allow setting breakpoints, to provide hot reload, etc.
    -->
    <uses-permission android:name="android.permission.INTERNET"/>
</manifest>

--------------------------------------------------
=== END OF FILE: android/app/src/debug/AndroidManifest.xml ===


=== FILE: android/app/src/main/AndroidManifest.xml ===
--------------------------------------------------
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <application
        android:label="MuscleUP!"
        android:name="${applicationName}"
        android:icon="@mipmap/launcher_icon">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:taskAffinity=""
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />
    </application>
    <!-- Required to query activities that can process text, see:
         https://developer.android.com/training/package-visibility and
         https://developer.android.com/reference/android/content/Intent#ACTION_PROCESS_TEXT.

         In particular, this is used by the Flutter engine in io.flutter.plugin.text.ProcessTextPlugin. -->
    <queries>
        <intent>
            <action android:name="android.intent.action.PROCESS_TEXT"/>
            <data android:mimeType="text/plain"/>
        </intent>
    </queries>
</manifest>

--------------------------------------------------
=== END OF FILE: android/app/src/main/AndroidManifest.xml ===


=== FILE: android/app/src/main/java/io/flutter/plugins/GeneratedPluginRegistrant.java ===
--------------------------------------------------
package io.flutter.plugins;

import androidx.annotation.Keep;
import androidx.annotation.NonNull;
import io.flutter.Log;

import io.flutter.embedding.engine.FlutterEngine;

/**
 * Generated file. Do not edit.
 * This file is generated by the Flutter tool based on the
 * plugins that support the Android platform.
 */
@Keep
public final class GeneratedPluginRegistrant {
  private static final String TAG = "GeneratedPluginRegistrant";
  public static void registerWith(@NonNull FlutterEngine flutterEngine) {
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.firebase.firestore.FlutterFirebaseFirestorePlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin cloud_firestore, io.flutter.plugins.firebase.firestore.FlutterFirebaseFirestorePlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.firebase.auth.FlutterFirebaseAuthPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin firebase_auth, io.flutter.plugins.firebase.auth.FlutterFirebaseAuthPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.firebase.core.FlutterFirebaseCorePlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin firebase_core, io.flutter.plugins.firebase.core.FlutterFirebaseCorePlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.googlesignin.GoogleSignInPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin google_sign_in_android, io.flutter.plugins.googlesignin.GoogleSignInPlugin", e);
    }
  }
}

--------------------------------------------------
=== END OF FILE: android/app/src/main/java/io/flutter/plugins/GeneratedPluginRegistrant.java ===


=== FILE: android/app/src/main/kotlin/com/example/muscle_up/MainActivity.kt ===
--------------------------------------------------
package com.example.muscle_up

import io.flutter.embedding.android.FlutterActivity

class MainActivity : FlutterActivity()

--------------------------------------------------
=== END OF FILE: android/app/src/main/kotlin/com/example/muscle_up/MainActivity.kt ===


=== FILE: android/app/src/main/res/drawable/launch_background.xml ===
--------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<!-- Modify this file to customize your launch splash screen -->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="@android:color/white" />

    <!-- You can insert your own image assets here -->
    <!-- <item>
        <bitmap
            android:gravity="center"
            android:src="@mipmap/launch_image" />
    </item> -->
</layer-list>

--------------------------------------------------
=== END OF FILE: android/app/src/main/res/drawable/launch_background.xml ===


=== FILE: android/app/src/main/res/drawable-v21/launch_background.xml ===
--------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<!-- Modify this file to customize your launch splash screen -->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="?android:colorBackground" />

    <!-- You can insert your own image assets here -->
    <!-- <item>
        <bitmap
            android:gravity="center"
            android:src="@mipmap/launch_image" />
    </item> -->
</layer-list>

--------------------------------------------------
=== END OF FILE: android/app/src/main/res/drawable-v21/launch_background.xml ===


=== FILE: android/app/src/main/res/values/styles.xml ===
--------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is off -->
    <style name="LaunchTheme" parent="@android:style/Theme.Light.NoTitleBar">
        <!-- Show a splash screen on the activity. Automatically removed when
             the Flutter engine draws its first frame -->
        <item name="android:windowBackground">@drawable/launch_background</item>
    </style>
    <!-- Theme applied to the Android Window as soon as the process has started.
         This theme determines the color of the Android Window while your
         Flutter UI initializes, as well as behind your Flutter UI while its
         running.

         This Theme is only used starting with V2 of Flutter's Android embedding. -->
    <style name="NormalTheme" parent="@android:style/Theme.Light.NoTitleBar">
        <item name="android:windowBackground">?android:colorBackground</item>
    </style>
</resources>

--------------------------------------------------
=== END OF FILE: android/app/src/main/res/values/styles.xml ===


=== FILE: android/app/src/main/res/values-night/styles.xml ===
--------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is on -->
    <style name="LaunchTheme" parent="@android:style/Theme.Black.NoTitleBar">
        <!-- Show a splash screen on the activity. Automatically removed when
             the Flutter engine draws its first frame -->
        <item name="android:windowBackground">@drawable/launch_background</item>
    </style>
    <!-- Theme applied to the Android Window as soon as the process has started.
         This theme determines the color of the Android Window while your
         Flutter UI initializes, as well as behind your Flutter UI while its
         running.

         This Theme is only used starting with V2 of Flutter's Android embedding. -->
    <style name="NormalTheme" parent="@android:style/Theme.Black.NoTitleBar">
        <item name="android:windowBackground">?android:colorBackground</item>
    </style>
</resources>

--------------------------------------------------
=== END OF FILE: android/app/src/main/res/values-night/styles.xml ===


=== FILE: android/app/src/profile/AndroidManifest.xml ===
--------------------------------------------------
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- The INTERNET permission is required for development. Specifically,
         the Flutter tool needs it to communicate with the running application
         to allow setting breakpoints, to provide hot reload, etc.
    -->
    <uses-permission android:name="android.permission.INTERNET"/>
</manifest>

--------------------------------------------------
=== END OF FILE: android/app/src/profile/AndroidManifest.xml ===


=== FILE: android/gradle/wrapper/gradle-wrapper.properties ===
--------------------------------------------------
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.12-all.zip

--------------------------------------------------
=== END OF FILE: android/gradle/wrapper/gradle-wrapper.properties ===


=== FILE: ios/.gitignore ===
--------------------------------------------------
**/dgph
*.mode1v3
*.mode2v3
*.moved-aside
*.pbxuser
*.perspectivev3
**/*sync/
.sconsign.dblite
.tags*
**/.vagrant/
**/DerivedData/
Icon?
**/Pods/
**/.symlinks/
profile
xcuserdata
**/.generated/
Flutter/App.framework
Flutter/Flutter.framework
Flutter/Flutter.podspec
Flutter/Generated.xcconfig
Flutter/ephemeral/
Flutter/app.flx
Flutter/app.zip
Flutter/flutter_assets/
Flutter/flutter_export_environment.sh
ServiceDefinitions.json
Runner/GeneratedPluginRegistrant.*

# Exceptions to above rules.
!default.mode1v3
!default.mode2v3
!default.pbxuser
!default.perspectivev3

--------------------------------------------------
=== END OF FILE: ios/.gitignore ===


=== FILE: ios/Flutter/AppFrameworkInfo.plist ===
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>CFBundleDevelopmentRegion</key>
  <string>en</string>
  <key>CFBundleExecutable</key>
  <string>App</string>
  <key>CFBundleIdentifier</key>
  <string>io.flutter.flutter.app</string>
  <key>CFBundleInfoDictionaryVersion</key>
  <string>6.0</string>
  <key>CFBundleName</key>
  <string>App</string>
  <key>CFBundlePackageType</key>
  <string>FMWK</string>
  <key>CFBundleShortVersionString</key>
  <string>1.0</string>
  <key>CFBundleSignature</key>
  <string>????</string>
  <key>CFBundleVersion</key>
  <string>1.0</string>
  <key>MinimumOSVersion</key>
  <string>12.0</string>
</dict>
</plist>

--------------------------------------------------
=== END OF FILE: ios/Flutter/AppFrameworkInfo.plist ===


=== FILE: ios/Flutter/Debug.xcconfig ===
--------------------------------------------------
#include "Generated.xcconfig"

--------------------------------------------------
=== END OF FILE: ios/Flutter/Debug.xcconfig ===


=== FILE: ios/Flutter/flutter_export_environment.sh ===
--------------------------------------------------
#!/bin/sh
# This is a generated file; do not edit or check into version control.
export "FLUTTER_ROOT=C:\Software\flutter\flutter"
export "FLUTTER_APPLICATION_PATH=C:\Users\levndays\Desktop\muscle_up"
export "COCOAPODS_PARALLEL_CODE_SIGN=true"
export "FLUTTER_TARGET=lib\main.dart"
export "FLUTTER_BUILD_DIR=build"
export "FLUTTER_BUILD_NAME=0.1.0"
export "FLUTTER_BUILD_NUMBER=0.1.0"
export "DART_OBFUSCATION=false"
export "TRACK_WIDGET_CREATION=true"
export "TREE_SHAKE_ICONS=false"
export "PACKAGE_CONFIG=.dart_tool/package_config.json"

--------------------------------------------------
=== END OF FILE: ios/Flutter/flutter_export_environment.sh ===


=== FILE: ios/Flutter/Generated.xcconfig ===
--------------------------------------------------
// This is a generated file; do not edit or check into version control.
FLUTTER_ROOT=C:\Software\flutter\flutter
FLUTTER_APPLICATION_PATH=C:\Users\levndays\Desktop\muscle_up
COCOAPODS_PARALLEL_CODE_SIGN=true
FLUTTER_TARGET=lib\main.dart
FLUTTER_BUILD_DIR=build
FLUTTER_BUILD_NAME=0.1.0
FLUTTER_BUILD_NUMBER=0.1.0
EXCLUDED_ARCHS[sdk=iphonesimulator*]=i386
EXCLUDED_ARCHS[sdk=iphoneos*]=armv7
DART_OBFUSCATION=false
TRACK_WIDGET_CREATION=true
TREE_SHAKE_ICONS=false
PACKAGE_CONFIG=.dart_tool/package_config.json

--------------------------------------------------
=== END OF FILE: ios/Flutter/Generated.xcconfig ===


=== FILE: ios/Flutter/Release.xcconfig ===
--------------------------------------------------
#include "Generated.xcconfig"

--------------------------------------------------
=== END OF FILE: ios/Flutter/Release.xcconfig ===


=== FILE: ios/Flutter/ephemeral/flutter_lldbinit ===
--------------------------------------------------
#
# Generated file, do not edit.
#

command script import --relative-to-command-file flutter_lldb_helper.py

--------------------------------------------------
=== END OF FILE: ios/Flutter/ephemeral/flutter_lldbinit ===


=== FILE: ios/Flutter/ephemeral/flutter_lldb_helper.py ===
--------------------------------------------------
#
# Generated file, do not edit.
#

import lldb

def handle_new_rx_page(frame: lldb.SBFrame, bp_loc, extra_args, intern_dict):
    """Intercept NOTIFY_DEBUGGER_ABOUT_RX_PAGES and touch the pages."""
    base = frame.register["x0"].GetValueAsAddress()
    page_len = frame.register["x1"].GetValueAsUnsigned()

    # Note: NOTIFY_DEBUGGER_ABOUT_RX_PAGES will check contents of the
    # first page to see if handled it correctly. This makes diagnosing
    # misconfiguration (e.g. missing breakpoint) easier.
    data = bytearray(page_len)
    data[0:8] = b'IHELPED!'

    error = lldb.SBError()
    frame.GetThread().GetProcess().WriteMemory(base, data, error)
    if not error.Success():
        print(f'Failed to write into {base}[+{page_len}]', error)
        return

def __lldb_init_module(debugger: lldb.SBDebugger, _):
    target = debugger.GetDummyTarget()
    # Caveat: must use BreakpointCreateByRegEx here and not
    # BreakpointCreateByName. For some reasons callback function does not
    # get carried over from dummy target for the later.
    bp = target.BreakpointCreateByRegex("^NOTIFY_DEBUGGER_ABOUT_RX_PAGES$")
    bp.SetScriptCallbackFunction('{}.handle_new_rx_page'.format(__name__))
    bp.SetAutoContinue(True)
    print("-- LLDB integration loaded --")

--------------------------------------------------
=== END OF FILE: ios/Flutter/ephemeral/flutter_lldb_helper.py ===


=== FILE: ios/Runner/AppDelegate.swift ===
--------------------------------------------------
import Flutter
import UIKit

@main
@objc class AppDelegate: FlutterAppDelegate {
  override func application(
    _ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
  ) -> Bool {
    GeneratedPluginRegistrant.register(with: self)
    return super.application(application, didFinishLaunchingWithOptions: launchOptions)
  }
}

--------------------------------------------------
=== END OF FILE: ios/Runner/AppDelegate.swift ===


=== FILE: ios/Runner/GeneratedPluginRegistrant.h ===
--------------------------------------------------
//
//  Generated file. Do not edit.
//

// clang-format off

#ifndef GeneratedPluginRegistrant_h
#define GeneratedPluginRegistrant_h

#import <Flutter/Flutter.h>

NS_ASSUME_NONNULL_BEGIN

@interface GeneratedPluginRegistrant : NSObject
+ (void)registerWithRegistry:(NSObject<FlutterPluginRegistry>*)registry;
@end

NS_ASSUME_NONNULL_END
#endif /* GeneratedPluginRegistrant_h */

--------------------------------------------------
=== END OF FILE: ios/Runner/GeneratedPluginRegistrant.h ===


=== FILE: ios/Runner/GeneratedPluginRegistrant.m ===
--------------------------------------------------
//
//  Generated file. Do not edit.
//

// clang-format off

#import "GeneratedPluginRegistrant.h"

#if __has_include(<cloud_firestore/FLTFirebaseFirestorePlugin.h>)
#import <cloud_firestore/FLTFirebaseFirestorePlugin.h>
#else
@import cloud_firestore;
#endif

#if __has_include(<firebase_auth/FLTFirebaseAuthPlugin.h>)
#import <firebase_auth/FLTFirebaseAuthPlugin.h>
#else
@import firebase_auth;
#endif

#if __has_include(<firebase_core/FLTFirebaseCorePlugin.h>)
#import <firebase_core/FLTFirebaseCorePlugin.h>
#else
@import firebase_core;
#endif

#if __has_include(<google_sign_in_ios/FLTGoogleSignInPlugin.h>)
#import <google_sign_in_ios/FLTGoogleSignInPlugin.h>
#else
@import google_sign_in_ios;
#endif

@implementation GeneratedPluginRegistrant

+ (void)registerWithRegistry:(NSObject<FlutterPluginRegistry>*)registry {
  [FLTFirebaseFirestorePlugin registerWithRegistrar:[registry registrarForPlugin:@"FLTFirebaseFirestorePlugin"]];
  [FLTFirebaseAuthPlugin registerWithRegistrar:[registry registrarForPlugin:@"FLTFirebaseAuthPlugin"]];
  [FLTFirebaseCorePlugin registerWithRegistrar:[registry registrarForPlugin:@"FLTFirebaseCorePlugin"]];
  [FLTGoogleSignInPlugin registerWithRegistrar:[registry registrarForPlugin:@"FLTGoogleSignInPlugin"]];
}

@end

--------------------------------------------------
=== END OF FILE: ios/Runner/GeneratedPluginRegistrant.m ===


=== FILE: ios/Runner/Info.plist ===
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>$(DEVELOPMENT_LANGUAGE)</string>
	<key>CFBundleDisplayName</key>
	<string>Muscle Up</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>muscle_up</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>$(FLUTTER_BUILD_NAME)</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>$(FLUTTER_BUILD_NUMBER)</string>
	<key>LSRequiresIPhoneOS</key>
	<true/>
	<key>UILaunchStoryboardName</key>
	<string>LaunchScreen</string>
	<key>UIMainStoryboardFile</key>
	<string>Main</string>
	<key>UISupportedInterfaceOrientations</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>UISupportedInterfaceOrientations~ipad</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationPortraitUpsideDown</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>CADisableMinimumFrameDurationOnPhone</key>
	<true/>
	<key>UIApplicationSupportsIndirectInputEvents</key>
	<true/>
</dict>
</plist>

--------------------------------------------------
=== END OF FILE: ios/Runner/Info.plist ===


=== FILE: ios/Runner/Runner-Bridging-Header.h ===
--------------------------------------------------
#import "GeneratedPluginRegistrant.h"

--------------------------------------------------
=== END OF FILE: ios/Runner/Runner-Bridging-Header.h ===


=== FILE: ios/Runner/Base.lproj/LaunchScreen.storyboard ===
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="12121" systemVersion="16G29" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" launchScreen="YES" colorMatched="YES" initialViewController="01J-lp-oVM">
    <dependencies>
        <deployment identifier="iOS"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="12089"/>
    </dependencies>
    <scenes>
        <!--View Controller-->
        <scene sceneID="EHf-IW-A2E">
            <objects>
                <viewController id="01J-lp-oVM" sceneMemberID="viewController">
                    <layoutGuides>
                        <viewControllerLayoutGuide type="top" id="Ydg-fD-yQy"/>
                        <viewControllerLayoutGuide type="bottom" id="xbc-2k-c8Z"/>
                    </layoutGuides>
                    <view key="view" contentMode="scaleToFill" id="Ze5-6b-2t3">
                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                        <subviews>
                            <imageView opaque="NO" clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="center" image="LaunchImage" translatesAutoresizingMaskIntoConstraints="NO" id="YRO-k0-Ey4">
                            </imageView>
                        </subviews>
                        <color key="backgroundColor" red="1" green="1" blue="1" alpha="1" colorSpace="custom" customColorSpace="sRGB"/>
                        <constraints>
                            <constraint firstItem="YRO-k0-Ey4" firstAttribute="centerX" secondItem="Ze5-6b-2t3" secondAttribute="centerX" id="1a2-6s-vTC"/>
                            <constraint firstItem="YRO-k0-Ey4" firstAttribute="centerY" secondItem="Ze5-6b-2t3" secondAttribute="centerY" id="4X2-HB-R7a"/>
                        </constraints>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="iYj-Kq-Ea1" userLabel="First Responder" sceneMemberID="firstResponder"/>
            </objects>
            <point key="canvasLocation" x="53" y="375"/>
        </scene>
    </scenes>
    <resources>
        <image name="LaunchImage" width="168" height="185"/>
    </resources>
</document>

--------------------------------------------------
=== END OF FILE: ios/Runner/Base.lproj/LaunchScreen.storyboard ===


=== FILE: ios/Runner/Base.lproj/Main.storyboard ===
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="10117" systemVersion="15F34" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" initialViewController="BYZ-38-t0r">
    <dependencies>
        <deployment identifier="iOS"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="10085"/>
    </dependencies>
    <scenes>
        <!--Flutter View Controller-->
        <scene sceneID="tne-QT-ifu">
            <objects>
                <viewController id="BYZ-38-t0r" customClass="FlutterViewController" sceneMemberID="viewController">
                    <layoutGuides>
                        <viewControllerLayoutGuide type="top" id="y3c-jy-aDJ"/>
                        <viewControllerLayoutGuide type="bottom" id="wfy-db-euE"/>
                    </layoutGuides>
                    <view key="view" contentMode="scaleToFill" id="8bC-Xf-vdC">
                        <rect key="frame" x="0.0" y="0.0" width="600" height="600"/>
                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                        <color key="backgroundColor" white="1" alpha="1" colorSpace="custom" customColorSpace="calibratedWhite"/>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="dkx-z0-nzr" sceneMemberID="firstResponder"/>
            </objects>
        </scene>
    </scenes>
</document>

--------------------------------------------------
=== END OF FILE: ios/Runner/Base.lproj/Main.storyboard ===


=== FILE: ios/Runner.xcodeproj/project.pbxproj ===
--------------------------------------------------
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 54;
	objects = {

/* Begin PBXBuildFile section */
		1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */ = {isa = PBXBuildFile; fileRef = 1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */; };
		331C808B294A63AB00263BE5 /* RunnerTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 331C807B294A618700263BE5 /* RunnerTests.swift */; };
		3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */ = {isa = PBXBuildFile; fileRef = 3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */; };
		74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74858FAE1ED2DC5600515810 /* AppDelegate.swift */; };
		97C146FC1CF9000F007C117D /* Main.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FA1CF9000F007C117D /* Main.storyboard */; };
		97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FD1CF9000F007C117D /* Assets.xcassets */; };
		97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */; };
/* End PBXBuildFile section */

/* Begin PBXContainerItemProxy section */
		331C8085294A63A400263BE5 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 97C146E61CF9000F007C117D /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 97C146ED1CF9000F007C117D;
			remoteInfo = Runner;
		};
/* End PBXContainerItemProxy section */

/* Begin PBXCopyFilesBuildPhase section */
		9705A1C41CF9048500538489 /* Embed Frameworks */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = "";
			dstSubfolderSpec = 10;
			files = (
			);
			name = "Embed Frameworks";
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GeneratedPluginRegistrant.h; sourceTree = "<group>"; };
		1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GeneratedPluginRegistrant.m; sourceTree = "<group>"; };
		331C807B294A618700263BE5 /* RunnerTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = RunnerTests.swift; sourceTree = "<group>"; };
		331C8081294A63A400263BE5 /* RunnerTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = RunnerTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; name = AppFrameworkInfo.plist; path = Flutter/AppFrameworkInfo.plist; sourceTree = "<group>"; };
		74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "Runner-Bridging-Header.h"; sourceTree = "<group>"; };
		74858FAE1ED2DC5600515810 /* AppDelegate.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = "<group>"; };
		7AFA3C8E1D35360C0083082E /* Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; name = Release.xcconfig; path = Flutter/Release.xcconfig; sourceTree = "<group>"; };
		9740EEB21CF90195004384FC /* Debug.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Debug.xcconfig; path = Flutter/Debug.xcconfig; sourceTree = "<group>"; };
		9740EEB31CF90195004384FC /* Generated.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Generated.xcconfig; path = Flutter/Generated.xcconfig; sourceTree = "<group>"; };
		97C146EE1CF9000F007C117D /* Runner.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = Runner.app; sourceTree = BUILT_PRODUCTS_DIR; };
		97C146FB1CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/Main.storyboard; sourceTree = "<group>"; };
		97C146FD1CF9000F007C117D /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = Assets.xcassets; sourceTree = "<group>"; };
		97C147001CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/LaunchScreen.storyboard; sourceTree = "<group>"; };
		97C147021CF9000F007C117D /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		97C146EB1CF9000F007C117D /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		331C8082294A63A400263BE5 /* RunnerTests */ = {
			isa = PBXGroup;
			children = (
				331C807B294A618700263BE5 /* RunnerTests.swift */,
			);
			path = RunnerTests;
			sourceTree = "<group>";
		};
		9740EEB11CF90186004384FC /* Flutter */ = {
			isa = PBXGroup;
			children = (
				3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */,
				9740EEB21CF90195004384FC /* Debug.xcconfig */,
				7AFA3C8E1D35360C0083082E /* Release.xcconfig */,
				9740EEB31CF90195004384FC /* Generated.xcconfig */,
			);
			name = Flutter;
			sourceTree = "<group>";
		};
		97C146E51CF9000F007C117D = {
			isa = PBXGroup;
			children = (
				9740EEB11CF90186004384FC /* Flutter */,
				97C146F01CF9000F007C117D /* Runner */,
				97C146EF1CF9000F007C117D /* Products */,
				331C8082294A63A400263BE5 /* RunnerTests */,
			);
			sourceTree = "<group>";
		};
		97C146EF1CF9000F007C117D /* Products */ = {
			isa = PBXGroup;
			children = (
				97C146EE1CF9000F007C117D /* Runner.app */,
				331C8081294A63A400263BE5 /* RunnerTests.xctest */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		97C146F01CF9000F007C117D /* Runner */ = {
			isa = PBXGroup;
			children = (
				97C146FA1CF9000F007C117D /* Main.storyboard */,
				97C146FD1CF9000F007C117D /* Assets.xcassets */,
				97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */,
				97C147021CF9000F007C117D /* Info.plist */,
				1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */,
				1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */,
				74858FAE1ED2DC5600515810 /* AppDelegate.swift */,
				74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */,
			);
			path = Runner;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		331C8080294A63A400263BE5 /* RunnerTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 331C8087294A63A400263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */;
			buildPhases = (
				331C807D294A63A400263BE5 /* Sources */,
				331C807F294A63A400263BE5 /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
				331C8086294A63A400263BE5 /* PBXTargetDependency */,
			);
			name = RunnerTests;
			productName = RunnerTests;
			productReference = 331C8081294A63A400263BE5 /* RunnerTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
		97C146ED1CF9000F007C117D /* Runner */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */;
			buildPhases = (
				9740EEB61CF901F6004384FC /* Run Script */,
				97C146EA1CF9000F007C117D /* Sources */,
				97C146EB1CF9000F007C117D /* Frameworks */,
				97C146EC1CF9000F007C117D /* Resources */,
				9705A1C41CF9048500538489 /* Embed Frameworks */,
				3B06AD1E1E4923F5004D2608 /* Thin Binary */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = Runner;
			productName = Runner;
			productReference = 97C146EE1CF9000F007C117D /* Runner.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		97C146E61CF9000F007C117D /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = YES;
				LastUpgradeCheck = 1510;
				ORGANIZATIONNAME = "";
				TargetAttributes = {
					331C8080294A63A400263BE5 = {
						CreatedOnToolsVersion = 14.0;
						TestTargetID = 97C146ED1CF9000F007C117D;
					};
					97C146ED1CF9000F007C117D = {
						CreatedOnToolsVersion = 7.3.1;
						LastSwiftMigration = 1100;
					};
				};
			};
			buildConfigurationList = 97C146E91CF9000F007C117D /* Build configuration list for PBXProject "Runner" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 97C146E51CF9000F007C117D;
			productRefGroup = 97C146EF1CF9000F007C117D /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				97C146ED1CF9000F007C117D /* Runner */,
				331C8080294A63A400263BE5 /* RunnerTests */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		331C807F294A63A400263BE5 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		97C146EC1CF9000F007C117D /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */,
				3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */,
				97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */,
				97C146FC1CF9000F007C117D /* Main.storyboard in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		3B06AD1E1E4923F5004D2608 /* Thin Binary */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
				"${TARGET_BUILD_DIR}/${INFOPLIST_PATH}",
			);
			name = "Thin Binary";
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" embed_and_thin";
		};
		9740EEB61CF901F6004384FC /* Run Script */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			name = "Run Script";
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" build";
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		331C807D294A63A400263BE5 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				331C808B294A63AB00263BE5 /* RunnerTests.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		97C146EA1CF9000F007C117D /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */,
				1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		331C8086294A63A400263BE5 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 97C146ED1CF9000F007C117D /* Runner */;
			targetProxy = 331C8085294A63A400263BE5 /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin PBXVariantGroup section */
		97C146FA1CF9000F007C117D /* Main.storyboard */ = {
			isa = PBXVariantGroup;
			children = (
				97C146FB1CF9000F007C117D /* Base */,
			);
			name = Main.storyboard;
			sourceTree = "<group>";
		};
		97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */ = {
			isa = PBXVariantGroup;
			children = (
				97C147001CF9000F007C117D /* Base */,
			);
			name = LaunchScreen.storyboard;
			sourceTree = "<group>";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		249021D3217E4FDB00AE95B9 /* Profile */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = iphoneos;
				SUPPORTED_PLATFORMS = iphoneos;
				TARGETED_DEVICE_FAMILY = "1,2";
				VALIDATE_PRODUCT = YES;
			};
			name = Profile;
		};
		249021D4217E4FDB00AE95B9 /* Profile */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
				ENABLE_BITCODE = NO;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = com.example.muscleUp;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Profile;
		};
		331C8088294A63A400263BE5 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.muscleUp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/Runner.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/Runner";
			};
			name = Debug;
		};
		331C8089294A63A400263BE5 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.muscleUp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/Runner.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/Runner";
			};
			name = Release;
		};
		331C808A294A63A400263BE5 /* Profile */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.muscleUp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/Runner.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/Runner";
			};
			name = Profile;
		};
		97C147031CF9000F007C117D /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = AppIcon;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
				MTL_ENABLE_DEBUG_INFO = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Debug;
		};
		97C147041CF9000F007C117D /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = AppIcon;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = iphoneos;
				SUPPORTED_PLATFORMS = iphoneos;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
				TARGETED_DEVICE_FAMILY = "1,2";
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		97C147061CF9000F007C117D /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 9740EEB21CF90195004384FC /* Debug.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
				ENABLE_BITCODE = NO;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = com.example.muscleUp;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Debug;
		};
		97C147071CF9000F007C117D /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
				ENABLE_BITCODE = NO;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = com.example.muscleUp;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		331C8087294A63A400263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				331C8088294A63A400263BE5 /* Debug */,
				331C8089294A63A400263BE5 /* Release */,
				331C808A294A63A400263BE5 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		97C146E91CF9000F007C117D /* Build configuration list for PBXProject "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				97C147031CF9000F007C117D /* Debug */,
				97C147041CF9000F007C117D /* Release */,
				249021D3217E4FDB00AE95B9 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				97C147061CF9000F007C117D /* Debug */,
				97C147071CF9000F007C117D /* Release */,
				249021D4217E4FDB00AE95B9 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 97C146E61CF9000F007C117D /* Project object */;
}

--------------------------------------------------
=== END OF FILE: ios/Runner.xcodeproj/project.pbxproj ===


=== FILE: ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata ===
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "self:">
   </FileRef>
</Workspace>

--------------------------------------------------
=== END OF FILE: ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata ===


=== FILE: ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist ===
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>

--------------------------------------------------
=== END OF FILE: ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist ===


=== FILE: ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings ===
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>PreviewsEnabled</key>
	<false/>
</dict>
</plist>

--------------------------------------------------
=== END OF FILE: ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings ===


=== FILE: ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme ===
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1510"
   version = "1.3">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "97C146ED1CF9000F007C117D"
               BuildableName = "Runner.app"
               BlueprintName = "Runner"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      customLLDBInitFile = "$(SRCROOT)/Flutter/ephemeral/flutter_lldbinit"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
      <Testables>
         <TestableReference
            skipped = "NO"
            parallelizable = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "331C8080294A63A400263BE5"
               BuildableName = "RunnerTests.xctest"
               BlueprintName = "RunnerTests"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </TestableReference>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      customLLDBInitFile = "$(SRCROOT)/Flutter/ephemeral/flutter_lldbinit"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      enableGPUValidationMode = "1"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Profile"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>

--------------------------------------------------
=== END OF FILE: ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme ===


=== FILE: ios/Runner.xcworkspace/contents.xcworkspacedata ===
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "group:Runner.xcodeproj">
   </FileRef>
</Workspace>

--------------------------------------------------
=== END OF FILE: ios/Runner.xcworkspace/contents.xcworkspacedata ===


=== FILE: ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist ===
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>

--------------------------------------------------
=== END OF FILE: ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist ===


=== FILE: ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings ===
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>PreviewsEnabled</key>
	<false/>
</dict>
</plist>

--------------------------------------------------
=== END OF FILE: ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings ===


=== FILE: ios/RunnerTests/RunnerTests.swift ===
--------------------------------------------------
import Flutter
import UIKit
import XCTest

class RunnerTests: XCTestCase {

  func testExample() {
    // If you add code to the Runner application, consider adding tests here.
    // See https://developer.apple.com/documentation/xctest for more information about using XCTest.
  }

}

--------------------------------------------------
=== END OF FILE: ios/RunnerTests/RunnerTests.swift ===


=== FILE: lib/auth_gate.dart ===
--------------------------------------------------
// lib/auth_gate.dart
import 'package:firebase_auth/firebase_auth.dart' as fb_auth;
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'core/domain/repositories/user_profile_repository.dart';
import 'core/domain/entities/user_profile.dart';
import 'features/profile/presentation/cubit/user_profile_cubit.dart'; // Cubit для профілю
import 'home_page.dart';
import 'login_page.dart';
import 'features/profile_setup/presentation/screens/profile_setup_screen.dart';
import 'dart:developer' as developer;

class AuthGate extends StatelessWidget {
  const AuthGate({super.key});

  @override
  Widget build(BuildContext context) {
    developer.log("AuthGate: Building with authStateChanges stream", name: "AuthGate");
    return StreamBuilder<fb_auth.User?>(
      stream: fb_auth.FirebaseAuth.instance.authStateChanges(),
      builder: (context, authSnapshot) {
        developer.log("AuthGate: StreamBuilder received authSnapshot - connectionState: ${authSnapshot.connectionState}, hasData: ${authSnapshot.hasData}, hasError: ${authSnapshot.hasError}", name: "AuthGate");
        if (authSnapshot.connectionState == ConnectionState.waiting) {
          developer.log("AuthGate: Auth state waiting", name: "AuthGate");
          return const Scaffold(body: Center(child: CircularProgressIndicator()));
        }

        if (authSnapshot.hasData && authSnapshot.data != null) {
          developer.log("AuthGate: User is authenticated (UID: ${authSnapshot.data!.uid}). Checking profile.", name: "AuthGate");
          // Користувач увійшов, передаємо FirebaseAuth instance, який вже є в RepositoryProvider з main.dart
          return _ProfileCheckGate(
            userId: authSnapshot.data!.uid,
            // firebaseAuth: RepositoryProvider.of<fb_auth.FirebaseAuth>(context), // Не потрібно, якщо кубіт отримує його напряму
          );
        }
        developer.log("AuthGate: User is not authenticated. Navigating to LoginPage.", name: "AuthGate");
        return const LoginPage();
      },
    );
  }
}

class _ProfileCheckGate extends StatelessWidget {
  final String userId;
  // final fb_auth.FirebaseAuth firebaseAuth; // Не потрібно, якщо кубіт отримує його напряму

  const _ProfileCheckGate({
    super.key, // Додано super.key
    required this.userId,
    // required this.firebaseAuth,
  });

  @override
  Widget build(BuildContext context) {
    final userProfileRepository = RepositoryProvider.of<UserProfileRepository>(context);
    final firebaseAuthFromProvider = RepositoryProvider.of<fb_auth.FirebaseAuth>(context); // Отримуємо з main.dart

    developer.log("_ProfileCheckGate: Building FutureBuilder for userId: $userId", name: "AuthGate._ProfileCheckGate");

    return FutureBuilder<UserProfile?>(
      future: userProfileRepository.getUserProfile(userId),
      builder: (context, profileSnapshot) {
        developer.log("_ProfileCheckGate: FutureBuilder received profileSnapshot - connectionState: ${profileSnapshot.connectionState}, hasData: ${profileSnapshot.hasData}, hasError: ${profileSnapshot.hasError}", name: "AuthGate._ProfileCheckGate");

        if (profileSnapshot.connectionState == ConnectionState.waiting) {
          developer.log("_ProfileCheckGate: Profile fetch waiting for userId: $userId", name: "AuthGate._ProfileCheckGate");
          return const Scaffold(body: Center(child: CircularProgressIndicator()));
        }

        if (profileSnapshot.hasError) {
          developer.log(
            "_ProfileCheckGate: Error fetching profile for $userId: ${profileSnapshot.error}",
            name: "AuthGate._ProfileCheckGate",
            error: profileSnapshot.error,
            stackTrace: profileSnapshot.stackTrace
          );
          return const LoginPage(); // Або спеціальна сторінка помилки
        }

        final userProfile = profileSnapshot.data;

        if (userProfile == null) {
            developer.log(
              "_ProfileCheckGate: Profile NOT FOUND for user $userId after login/auth change. This might be a sync issue or profile creation failed. Redirecting to login.",
              name: "AuthGate._ProfileCheckGate"
            );
            // Можна спробувати вийти, щоб уникнути циклів, якщо щось пішло не так з створенням профілю
            // fb_auth.FirebaseAuth.instance.signOut();
            return const LoginPage();
        }
        
        developer.log("_ProfileCheckGate: Profile loaded for $userId. profileSetupComplete: ${userProfile.profileSetupComplete}", name: "AuthGate._ProfileCheckGate");

        if (userProfile.profileSetupComplete) {
          developer.log("_ProfileCheckGate: Profile setup is complete. Navigating to HomePage with UserProfileCubit.", name: "AuthGate._ProfileCheckGate");
          return BlocProvider<UserProfileCubit>(
            create: (cubitContext) => UserProfileCubit(
              userProfileRepository, // Вже отримано вище
              firebaseAuthFromProvider, // Передаємо з RepositoryProvider
            ), // fetchUserProfile буде викликано в конструкторі UserProfileCubit
            child: const HomePage(),
          );
        } else {
          developer.log("_ProfileCheckGate: Profile setup is NOT complete. Navigating to ProfileSetupScreen.", name: "AuthGate._ProfileCheckGate");
          // ProfileSetupScreen сам створить свій ProfileSetupCubit,
          // якому потрібен UserProfileRepository та FirebaseAuth, які вже є в RepositoryProvider.
          return const ProfileSetupScreen();
        }
      },
    );
  }
}
--------------------------------------------------
=== END OF FILE: lib/auth_gate.dart ===


=== FILE: lib/firebase_options.dart ===
--------------------------------------------------
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyDXdgCNhubTMaavu2na3KA3CAvPlriiPOI',
    appId: '1:1012783717502:web:89f5605ac9ecd155938c2f',
    messagingSenderId: '1012783717502',
    projectId: 'muscle-up-8c275',
    authDomain: 'muscle-up-8c275.firebaseapp.com',
    storageBucket: 'muscle-up-8c275.firebasestorage.app',
    measurementId: 'G-GV825LKZPE',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyCnwYrzMP3nVK_bpX86pgItzDt-FK77NX8',
    appId: '1:1012783717502:android:2f7ce9326b23c730938c2f',
    messagingSenderId: '1012783717502',
    projectId: 'muscle-up-8c275',
    storageBucket: 'muscle-up-8c275.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyCH_-IcY1EU-mHG5E8-Gj9W2iCjcmisBfk',
    appId: '1:1012783717502:ios:debb2939085adc3f938c2f',
    messagingSenderId: '1012783717502',
    projectId: 'muscle-up-8c275',
    storageBucket: 'muscle-up-8c275.firebasestorage.app',
    iosBundleId: 'com.example.muscleUp',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyCH_-IcY1EU-mHG5E8-Gj9W2iCjcmisBfk',
    appId: '1:1012783717502:ios:debb2939085adc3f938c2f',
    messagingSenderId: '1012783717502',
    projectId: 'muscle-up-8c275',
    storageBucket: 'muscle-up-8c275.firebasestorage.app',
    iosBundleId: 'com.example.muscleUp',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'AIzaSyDXdgCNhubTMaavu2na3KA3CAvPlriiPOI',
    appId: '1:1012783717502:web:a6ef83f4982ba06e938c2f',
    messagingSenderId: '1012783717502',
    projectId: 'muscle-up-8c275',
    authDomain: 'muscle-up-8c275.firebaseapp.com',
    storageBucket: 'muscle-up-8c275.firebasestorage.app',
    measurementId: 'G-8LRCSHJ4VK',
  );
}

--------------------------------------------------
=== END OF FILE: lib/firebase_options.dart ===


=== FILE: lib/home_page.dart ===
--------------------------------------------------
// lib/home_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:firebase_auth/firebase_auth.dart' as fb_auth;
import 'dart:developer' as developer;

import 'features/dashboard/presentation/screens/dashboard_screen.dart';
import 'features/routines/presentation/screens/user_routines_screen.dart';
import 'features/notifications/presentation/cubit/notifications_cubit.dart';
import 'features/notifications/presentation/screens/notifications_screen.dart';
import 'core/domain/repositories/notification_repository.dart';
// UserProfileCubit надається в AuthGate, тому тут він доступний через context.read
// import 'features/profile/presentation/cubit/user_profile_cubit.dart';


// Плейсхолдери для інших екранів
class PostsScreen extends StatelessWidget {
  const PostsScreen({super.key});
  @override
  Widget build(BuildContext context) => Scaffold(appBar: AppBar(title: const Text("Posts")), body: const Center(child: Text("Posts Screen Content")));
}
class ProgressScreen extends StatelessWidget {
  const ProgressScreen({super.key});
  @override
  Widget build(BuildContext context) => Scaffold(appBar: AppBar(title: const Text("Progress")), body: const Center(child: Text("Progress Screen Content")));
}
class ProfileScreen extends StatelessWidget {
  const ProfileScreen({super.key});
  @override
  Widget build(BuildContext context) => Scaffold(appBar: AppBar(title: const Text("Profile")), body: const Center(child: Text("Profile Screen Content")));
}


class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    // UserProfileCubit вже має бути наданий в AuthGate/_ProfileCheckGate
    // Якщо ні, то його також потрібно надати тут або вище (в AuthGate)
    // Наприклад, якщо UserProfileCubit надається в AuthGate, тут ми його не створюємо знову.
    
    return BlocProvider<NotificationsCubit>(
      create: (cubitContext) => NotificationsCubit(
        RepositoryProvider.of<NotificationRepository>(cubitContext), // Отримуємо з MultiRepositoryProvider
        fb_auth.FirebaseAuth.instance, // Отримуємо з MultiRepositoryProvider (або напряму)
      ),
      // NotificationsCubit автоматично підпишеться на зміни стану автентифікації
      // і завантажить сповіщення, коли користувач увійде.
      child: const _HomePageContent(),
    );
  }
}

class _HomePageContent extends StatefulWidget {
  const _HomePageContent();

  @override
  State<_HomePageContent> createState() => _HomePageContentState();
}

class _HomePageContentState extends State<_HomePageContent> {
  int _selectedIndex = -1; // -1 для DashboardScreen

  static final List<Widget> _bottomNavScreens = <Widget>[
    const UserRoutinesScreen(), // 0
    const PostsScreen(),        // 1
    const ProgressScreen(),     // 2
    const ProfileScreen(),      // 3
  ];

  void _onItemTapped(int index) {
    developer.log("BottomNav tapped, index: $index", name: "HomePage");
    setState(() {
      _selectedIndex = index;
    });
  }

  void _navigateToDashboard() {
    developer.log("Navigating to Dashboard", name: "HomePage");
    setState(() {
      _selectedIndex = -1;
    });
  }

  void _navigateToProfile() {
    developer.log("Navigating to Profile tab", name: "HomePage");
    setState(() {
      _selectedIndex = 3; // Індекс вкладки "PROFILE"
    });
  }

  void _navigateToProgress() {
    developer.log("Navigating to Progress tab", name: "HomePage");
    setState(() {
      _selectedIndex = 2; // Індекс вкладки "PROGRESS"
    });
  }

  void _navigateToNotifications() {
    developer.log("Navigating to NotificationsScreen", name: "HomePage");
    Navigator.of(context).push(MaterialPageRoute(
      builder: (_) {
        // NotificationsCubit вже наданий вище через BlocProvider,
        // тому він буде доступний в NotificationsScreen через context.read<NotificationsCubit>()
        // або через BlocProvider.value, якщо передавати його явно.
        // У цьому випадку NotificationsScreen просто його прочитає.
        return const NotificationsScreen();
      },
    ));
  }

  @override
  Widget build(BuildContext context) {
    developer.log("HomePageContent building, _selectedIndex: $_selectedIndex", name: "HomePage");
    Widget currentBody;
    bool showFab = false;

    if (_selectedIndex == -1) {
      currentBody = DashboardScreen(
        onProfileTap: _navigateToProfile,
        onProgressTap: _navigateToProgress,
        onNotificationsTap: _navigateToNotifications, // Передаємо новий колбек
      );
      showFab = true;
    } else {
      currentBody = _bottomNavScreens[_selectedIndex];
    }

    Widget appBarTitleWidget = GestureDetector(
      onTap: _navigateToDashboard,
      child: RichText(
        text: TextSpan(
          style: Theme.of(context).appBarTheme.titleTextStyle,
          children: const <TextSpan>[
            TextSpan(text: 'Muscle', style: TextStyle(color: Color(0xFFED5D1A))),
            TextSpan(text: 'UP'),
          ],
        ),
      ),
    );

    return Scaffold(
      appBar: AppBar(
        title: appBarTitleWidget,
        centerTitle: true,
        actions: [
          BlocBuilder<NotificationsCubit, NotificationsState>(
            builder: (context, state) {
              int unreadCount = 0;
              if (state is NotificationsLoaded) {
                unreadCount = state.unreadCount;
              }
              developer.log("AppBar NotificationsCubit state: $state, unreadCount: $unreadCount", name: "HomePage.AppBar");
              return IconButton(
                icon: Badge( // Використовуємо стандартний Badge
                  label: Text('$unreadCount'),
                  isLabelVisible: unreadCount > 0,
                  backgroundColor: Theme.of(context).colorScheme.primary,
                  textColor: Colors.white,
                  child: const Icon(Icons.notifications_outlined),
                ),
                tooltip: 'Notifications',
                onPressed: _navigateToNotifications,
              );
            },
          ),
          const SizedBox(width: 8),
        ],
      ),
      body: currentBody,
      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
      floatingActionButton: showFab
          ? Container(
              margin: const EdgeInsets.only(bottom: 3.0),
              child: FloatingActionButton.extended(
                onPressed: () {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Start Workout FAB Tapped! (Logic to be implemented)')),
                  );
                },
                label: const Text(
                  'START WORKOUT',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w900,
                    color: Colors.white,
                  ),
                ),
                icon: const Icon(Icons.fitness_center, color: Colors.white),
                backgroundColor: const Color(0xFFED5D1A),
                shape: const StadiumBorder(),
                elevation: 6.0,
              ),
            )
          : null,
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.fitness_center_outlined),
            activeIcon: Icon(Icons.fitness_center),
            label: 'ROUTINES',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.search_outlined),
            activeIcon: Icon(Icons.search),
            label: 'POSTS',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.emoji_events_outlined),
            activeIcon: Icon(Icons.emoji_events),
            label: 'PROGRESS',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person_outline),
            activeIcon: Icon(Icons.person),
            label: 'PROFILE',
          ),
        ],
        currentIndex: (_selectedIndex >= 0 && _selectedIndex < _bottomNavScreens.length) ? _selectedIndex : 0,
        onTap: _onItemTapped,
      ),
    );
  }
}
--------------------------------------------------
=== END OF FILE: lib/home_page.dart ===


=== FILE: lib/login_page.dart ===
--------------------------------------------------
// lib/login_page.dart
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:developer' as developer;

const Color primaryOrange = Color(0xFFED5D1A);
const Color textBlack = Colors.black87;
const Color textGrey = Color(0xFF757575);
const Color subtleOrangeBase = Color(0xFFFFF0E5);
const Color whiteWithOpacity = Colors.white70;

class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> with TickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();

  bool _isLoading = false;
  bool _isLogin = true;
  String? _errorMessage;

  late AnimationController _gradientController1;
  late AnimationController _gradientController2;
  late Animation<Alignment> _alignmentAnimation1;
  late Animation<Alignment> _alignmentAnimation2;

  final List<Color> _gradientColors1 = [
    primaryOrange.withOpacity(0.25),
    subtleOrangeBase.withOpacity(0.4),
    whiteWithOpacity.withOpacity(0.3),
  ];
  final List<Color> _gradientColors2 = [
    subtleOrangeBase.withOpacity(0.5),
    primaryOrange.withOpacity(0.15),
    Colors.white.withOpacity(0.35),
  ];

  @override
  void initState() {
    super.initState();
    developer.log("LoginPage initState", name: "LoginPage");
    _gradientController1 = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 10),
    )..repeat(reverse: true);

    _gradientController2 = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 13),
    )..repeat(reverse: true);

    _alignmentAnimation1 = TweenSequence<Alignment>([
      TweenSequenceItem(tween: AlignmentTween(begin: Alignment.topLeft, end: Alignment.bottomRight), weight: 1),
      TweenSequenceItem(tween: AlignmentTween(begin: Alignment.bottomRight, end: Alignment.centerLeft), weight: 1),
      TweenSequenceItem(tween: AlignmentTween(begin: Alignment.centerLeft, end: Alignment.topRight), weight: 1),
      TweenSequenceItem(tween: AlignmentTween(begin: Alignment.topRight, end: Alignment.topLeft), weight: 1),
    ]).animate(CurvedAnimation(parent: _gradientController1, curve: Curves.easeInOut));

    _alignmentAnimation2 = TweenSequence<Alignment>([
      TweenSequenceItem(tween: AlignmentTween(begin: Alignment.bottomLeft, end: Alignment.topRight), weight: 1),
      TweenSequenceItem(tween: AlignmentTween(begin: Alignment.topRight, end: Alignment.centerRight), weight: 1),
      TweenSequenceItem(tween: AlignmentTween(begin: Alignment.centerRight, end: Alignment.bottomLeft), weight: 1),
    ]).animate(CurvedAnimation(parent: _gradientController2, curve: Curves.easeInOut));
  }

  Future<void> _createInitialUserProfile(User user) async {
    developer.log("Attempting to create initial user profile for ${user.uid}", name: "LoginPage._createInitialUserProfile");
    final firestore = FirebaseFirestore.instance;
    final userDocRef = firestore.collection('users').doc(user.uid);

    final docSnapshot = await userDocRef.get();
    if (docSnapshot.exists) {
      developer.log("User profile already exists for ${user.uid}", name: "LoginPage._createInitialUserProfile");
      return;
    }
    try {
      await userDocRef.set({
        'uid': user.uid,
        'email': user.email?.toLowerCase(),
        'displayName': user.displayName,
        'profilePictureUrl': user.photoURL,
        'username': null,
        'xp': 0,
        'level': 1,
        'currentStreak': 0,
        'longestStreak': 0,
        'lastWorkoutTimestamp': null,
        'scheduledWorkoutDays': [],
        'preferredUnits': 'kg',
        'currentLeagueId': null,
        'city': null,
        'country': null,
        'isProfilePublic': true,
        'fcmTokens': [],
        'appSettings': {},
        'initialFitnessLevel': null,
        'profileSetupComplete': false,
        'createdAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });
      developer.log("Initial user profile CREATED for ${user.uid}", name: "LoginPage._createInitialUserProfile");
    } catch (e) {
      developer.log("Error creating initial user profile: $e", name: "LoginPage._createInitialUserProfile");
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Помилка створення профілю: ${e.toString()}')),
        );
      }
    }
    developer.log("Finished _createInitialUserProfile for ${user.uid}", name: "LoginPage._createInitialUserProfile");
  }

  Future<void> _submitForm() async {
    developer.log("Entering _submitForm. _formKey.currentState is: ${_formKey.currentState}", name: "LoginPage._submitForm");

    if (_formKey.currentState == null) {
      developer.log("CRITICAL: _formKey.currentState is NULL. Form might not be in the widget tree or key is not assigned.", name: "LoginPage._submitForm");
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Internal form error. Please try again.')),
        );
      }
      return;
    }

    final isValid = _formKey.currentState!.validate();
    
    if (!isValid) {
      developer.log("Form is NOT valid. Validation errors should be visible.", name: "LoginPage._submitForm");
      return;
    }
    developer.log("Form is VALID. Proceeding with submission. _isLogin: $_isLogin", name: "LoginPage._submitForm");

    if(mounted) setState(() { _isLoading = true; _errorMessage = null; });

    try {
      UserCredential userCredential;
      if (_isLogin) {
        developer.log("Attempting to sign in with email: ${_emailController.text.trim()}", name: "LoginPage._submitForm");
        userCredential = await FirebaseAuth.instance.signInWithEmailAndPassword(
          email: _emailController.text.trim(),
          password: _passwordController.text.trim(),
        );
        developer.log("Sign in successful: ${userCredential.user?.uid}", name: "LoginPage._submitForm");
      } else { // Create Account logic
        developer.log("Attempting to create account with email: ${_emailController.text.trim()}", name: "LoginPage._submitForm");
        userCredential = await FirebaseAuth.instance.createUserWithEmailAndPassword(
          email: _emailController.text.trim(),
          password: _passwordController.text.trim(),
        );
        developer.log("Account creation successful with Firebase Auth: ${userCredential.user?.uid}", name: "LoginPage._submitForm");
        if (userCredential.user != null) {
          await _createInitialUserProfile(userCredential.user!);
        } else {
           developer.log("User is null after createUserWithEmailAndPassword, cannot create profile.", name: "LoginPage._submitForm");
        }
      }
    } on FirebaseAuthException catch (e) {
      developer.log("FirebaseAuthException: ${e.code} - ${e.message}", name: "LoginPage._submitForm");
      if(mounted) setState(() => _errorMessage = e.message ?? 'Сталася помилка автентифікації.');
    } catch (e, s) { // Додано stackTrace
      developer.log("Generic Exception in _submitForm: $e", name: "LoginPage._submitForm", error: e, stackTrace: s);
      if(mounted) setState(() => _errorMessage = 'Сталася невідома помилка: ${e.toString()}');
    } finally {
      developer.log("_submitForm finally block. Mounted: $mounted. Setting _isLoading to false.", name: "LoginPage._submitForm");
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  Future<void> _signInWithGoogle() async {
    developer.log("Attempting Google Sign-In...", name: "LoginPage._signInWithGoogle");
    if(mounted) setState(() { _isLoading = true; _errorMessage = null; });
    try {
      final GoogleSignInAccount? googleUser = await GoogleSignIn().signIn();
      if (googleUser == null) {
        developer.log("Google Sign-In cancelled by user.", name: "LoginPage._signInWithGoogle");
        if (mounted) setState(() => _isLoading = false);
        return;
      }
      developer.log("Google User obtained: ${googleUser.email}", name: "LoginPage._signInWithGoogle");
      final GoogleSignInAuthentication googleAuth = await googleUser.authentication;
      final AuthCredential credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken, idToken: googleAuth.idToken,
      );
      UserCredential userCredential = await FirebaseAuth.instance.signInWithCredential(credential);
      developer.log("Firebase Sign-In with Google successful: ${userCredential.user?.uid}", name: "LoginPage._signInWithGoogle");
      
      if (userCredential.additionalUserInfo?.isNewUser == true && userCredential.user != null) {
        developer.log("New user detected via Google Sign-In. Creating profile...", name: "LoginPage._signInWithGoogle");
        await _createInitialUserProfile(userCredential.user!);
      } else if (userCredential.user != null) {
        developer.log("Existing user via Google Sign-In or profile already handled.", name: "LoginPage._signInWithGoogle");
      } else {
        developer.log("User is null after Google Sign-In, cannot create profile.", name: "LoginPage._signInWithGoogle");
      }
    } on FirebaseAuthException catch (e) {
      developer.log("FirebaseAuthException during Google Sign-In: ${e.code} - ${e.message}", name: "LoginPage._signInWithGoogle");
       if(mounted) setState(() => _errorMessage = e.message ?? 'Помилка входу через Google.');
    } catch (e, s) { // Додано stackTrace
      developer.log("Generic Exception during Google Sign-In: $e", name: "LoginPage._signInWithGoogle", error: e, stackTrace: s);
      if(mounted) setState(() => _errorMessage = 'Невідома помилка під час входу через Google: ${e.toString()}');
    } finally {
      developer.log("Google Sign-In finally block. Mounted: $mounted. Setting _isLoading to false.", name: "LoginPage._signInWithGoogle");
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  void dispose() {
    developer.log("LoginPage dispose", name: "LoginPage");
    _emailController.dispose();
    _passwordController.dispose();
    _gradientController1.dispose();
    _gradientController2.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    developer.log("LoginPage build method. _isLogin: $_isLogin, _isLoading: $_isLoading", name: "LoginPage");
    return Scaffold(
      body: Stack(
        children: [
          AnimatedBuilder(
            animation: _gradientController1,
            builder: (context, child) {
              return Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: _gradientColors1,
                    begin: _alignmentAnimation1.value,
                    end: -_alignmentAnimation1.value,
                    stops: const [0.0, 0.5, 1.0],
                  ),
                ),
              );
            },
          ),
          AnimatedBuilder(
            animation: _gradientController2,
            builder: (context, child) {
              return Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: _gradientColors2,
                    begin: _alignmentAnimation2.value,
                    end: -_alignmentAnimation2.value,
                    stops: const [0.0, 0.4, 1.0],
                  ),
                ),
              );
            },
          ),
          SafeArea(
            child: Center(
              child: SingleChildScrollView(
                padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 15.0),
                child: Form( // Дуже важливо: Form обгортає поля та має ключ
                  key: _formKey,
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: <Widget>[
                      Padding(
                        padding: const EdgeInsets.only(top: 15.0, bottom: 40.0),
                        child: RichText(
                          textAlign: TextAlign.center,
                          text: TextSpan(
                            style: DefaultTextStyle.of(context).style.copyWith(fontFamily: 'Inter'),
                            children: const <TextSpan>[
                              TextSpan(
                                  text: 'Muscle',
                                  style: TextStyle(
                                    fontSize: 30,
                                    fontWeight: FontWeight.bold,
                                    color: primaryOrange,
                                  )),
                              TextSpan(
                                  text: 'UP',
                                  style: TextStyle(
                                    fontSize: 30,
                                    fontWeight: FontWeight.bold,
                                    color: textBlack,
                                  )),
                            ],
                          ),
                        ),
                      ),
                      Text(
                        _isLogin ? 'Sign In' : 'Sign Up',
                        textAlign: TextAlign.center,
                        style: const TextStyle(
                          fontSize: 28,
                          fontWeight: FontWeight.bold,
                          color: textBlack,
                        ),
                      ),
                      const SizedBox(height: 30),
                      if (_errorMessage != null)
                        Padding(
                          padding: const EdgeInsets.only(bottom: 15.0),
                          child: Text(
                            _errorMessage!,
                            style: TextStyle(color: Theme.of(context).colorScheme.error, fontSize: 14),
                            textAlign: TextAlign.center,
                          ),
                        ),
                      TextFormField(
                        controller: _emailController,
                        decoration: InputDecoration(
                          hintText: 'Email',
                          prefixIcon: const Icon(Icons.email_outlined, color: textGrey),
                          filled: true,
                          fillColor: Colors.white.withOpacity(0.9),
                           border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12.0),
                            borderSide: BorderSide.none,
                          ),
                          focusedBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12.0),
                            borderSide: const BorderSide(color: primaryOrange, width: 1.5),
                          ),
                          contentPadding: const EdgeInsets.symmetric(vertical: 16.0, horizontal: 20.0),
                        ),
                        keyboardType: TextInputType.emailAddress,
                        style: const TextStyle(color: textBlack),
                        validator: (value) {
                          if (value == null || value.trim().isEmpty) return 'Please enter your email';
                          if (!value.contains('@') || !value.contains('.')) return 'Please enter a valid email';
                          return null;
                        },
                      ),
                      const SizedBox(height: 16),
                      TextFormField(
                        controller: _passwordController,
                        decoration: InputDecoration(
                          hintText: 'Password',
                          prefixIcon: const Icon(Icons.lock_outline, color: textGrey),
                          filled: true,
                          fillColor: Colors.white.withOpacity(0.9),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12.0),
                            borderSide: BorderSide.none,
                          ),
                          focusedBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12.0),
                            borderSide: const BorderSide(color: primaryOrange, width: 1.5),
                          ),
                           contentPadding: const EdgeInsets.symmetric(vertical: 16.0, horizontal: 20.0),
                        ),
                        obscureText: true,
                        style: const TextStyle(color: textBlack),
                        validator: (value) {
                          if (value == null || value.isEmpty) return 'Please enter your password';
                          if (!_isLogin && value.length < 6) return 'Password must be at least 6 characters';
                          return null;
                        },
                      ),
                      const SizedBox(height: 24),
                      if (_isLoading)
                        const Center(child: CircularProgressIndicator(color: primaryOrange))
                      else
                        ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: primaryOrange,
                            padding: const EdgeInsets.symmetric(vertical: 16.0),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12.0),
                            ),
                            elevation: 3,
                          ),
                          onPressed: _submitForm, // Виклик _submitForm
                          child: Text(
                            _isLogin ? 'Sign In' : 'Create Account',
                            style: const TextStyle(fontSize: 16, color: Colors.white, fontWeight: FontWeight.w600),
                          ),
                        ),
                      const SizedBox(height: 16),
                      ElevatedButton.icon(
                        icon: Image.asset('assets/images/google_logo.png', height: 22.0),
                        label: const Text(
                          'Sign in with Google',
                          style: TextStyle(color: textBlack, fontWeight: FontWeight.w500),
                        ),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.white,
                          foregroundColor: textBlack,
                          padding: const EdgeInsets.symmetric(vertical: 14.0),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12.0),
                            side: BorderSide(color: Colors.grey.shade300),
                          ),
                          elevation: 1,
                        ),
                        onPressed: _signInWithGoogle, // Виклик _signInWithGoogle
                      ),
                      const SizedBox(height: 24),
                      TextButton(
                        onPressed: () {
                          if (_isLoading) {
                            developer.log("Switch auth mode button pressed while loading, ignoring.", name: "LoginPage");
                            return;
                          }
                          developer.log("Switching auth mode. Current _isLogin: $_isLogin", name: "LoginPage");
                          setState(() {
                            _isLogin = !_isLogin;
                            _errorMessage = null;
                            _formKey.currentState?.reset();
                            _emailController.clear();
                            _passwordController.clear();
                          });
                           developer.log("Auth mode switched. New _isLogin: $_isLogin", name: "LoginPage");
                        },
                        child: Text(
                          _isLogin ? 'Don\'t have an account? Sign Up' : 'Already have an account? Sign In',
                          style: const TextStyle(
                            color: primaryOrange,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                      const SizedBox(height: 20),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
--------------------------------------------------
=== END OF FILE: lib/login_page.dart ===


=== FILE: lib/main.dart ===
--------------------------------------------------
// lib/main.dart
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:firebase_auth/firebase_auth.dart' as fb_auth;

import 'firebase_options.dart';
import 'auth_gate.dart';

// Репозиторії
import 'core/domain/repositories/predefined_exercise_repository.dart';
import 'features/exercise_explorer/data/repositories/predefined_exercise_repository_impl.dart';
import 'core/domain/repositories/routine_repository.dart';
import 'features/routines/data/repositories/routine_repository_impl.dart';
import 'core/domain/repositories/user_profile_repository.dart';
import 'features/profile_setup/data/repositories/user_profile_repository_impl.dart';
import 'core/domain/repositories/notification_repository.dart'; // <--- ДОДАНО
import 'features/notifications/data/repositories/notification_repository_impl.dart'; // <--- ДОДАНО

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(const MainApp());
}

class MainApp extends StatelessWidget {
  const MainApp({super.key});

  @override
  Widget build(BuildContext context) {
    const Color primaryOrange = Color(0xFFED5D1A);
    const Color textBlackColor = Colors.black87;

    return MultiRepositoryProvider(
      providers: [
        RepositoryProvider<PredefinedExerciseRepository>(
          create: (context) => PredefinedExerciseRepositoryImpl(),
        ),
        RepositoryProvider<RoutineRepository>(
          create: (context) => RoutineRepositoryImpl(),
        ),
        RepositoryProvider<UserProfileRepository>(
          create: (context) => UserProfileRepositoryImpl(),
        ),
        RepositoryProvider<fb_auth.FirebaseAuth>(
          create: (context) => fb_auth.FirebaseAuth.instance,
        ),
        RepositoryProvider<NotificationRepository>( // <--- ДОДАНО
          create: (context) => NotificationRepositoryImpl(),
        ),
      ],
      child: MaterialApp(
        debugShowCheckedModeBanner: false,
        title: 'Muscle UP',
        theme: ThemeData(
          primarySwatch: Colors.deepOrange,
          colorScheme: ColorScheme.fromSwatch(
            primarySwatch: Colors.deepOrange,
            accentColor: Colors.amberAccent,
            brightness: Brightness.light,
          ).copyWith(
            primary: primaryOrange,
            onPrimary: Colors.white,
            secondary: Colors.amberAccent,
            surface: Colors.white,
            onSurface: textBlackColor,
            background: const Color(0xFFF5F5F5),
            onBackground: textBlackColor,
            error: Colors.redAccent,
            onError: Colors.white,
          ),
          useMaterial3: true,
          fontFamily: 'Inter',
          
          textTheme: const TextTheme(
            displayLarge: TextStyle(fontFamily: 'Inter', fontWeight: FontWeight.w900, color: textBlackColor),
            displayMedium: TextStyle(fontFamily: 'Inter', fontWeight: FontWeight.w900, color: textBlackColor),
            displaySmall: TextStyle(fontFamily: 'Inter', fontWeight: FontWeight.w900, color: textBlackColor),
            headlineLarge: TextStyle(fontFamily: 'Inter', fontWeight: FontWeight.w700, color: textBlackColor),
            headlineMedium: TextStyle(fontFamily: 'Inter', fontWeight: FontWeight.w700, color: textBlackColor),
            headlineSmall: TextStyle(fontFamily: 'Inter', fontWeight: FontWeight.w700, color: textBlackColor),
            titleLarge: TextStyle(fontFamily: 'Inter', fontWeight: FontWeight.w600, color: textBlackColor),
            titleMedium: TextStyle(fontFamily: 'Inter', fontWeight: FontWeight.w500, color: textBlackColor),
            titleSmall: TextStyle(fontFamily: 'Inter', fontWeight: FontWeight.w500, color: textBlackColor),
            bodyLarge: TextStyle(fontFamily: 'Inter', color: textBlackColor),
            bodyMedium: TextStyle(fontFamily: 'Inter', color: Colors.black54),
            bodySmall: TextStyle(fontFamily: 'Inter', color: Colors.grey),
            labelLarge: TextStyle(fontFamily: 'Inter', fontWeight: FontWeight.w600, color: Colors.white),
            labelMedium: TextStyle(fontFamily: 'Inter', fontWeight: FontWeight.w500),
            labelSmall: TextStyle(fontFamily: 'Inter', fontWeight: FontWeight.w400),
          ).apply(
             bodyColor: textBlackColor,
             displayColor: textBlackColor,
          ),

          iconTheme: const IconThemeData(color: primaryOrange),
          inputDecorationTheme: InputDecorationTheme(
            filled: true,
            fillColor: Colors.white.withOpacity(0.95),
            hintStyle: TextStyle(color: Colors.grey[500], fontFamily: 'Inter'),
            border: OutlineInputBorder(
              borderRadius: const BorderRadius.all(Radius.circular(12.0)),
              borderSide: BorderSide(color: Colors.grey.shade300, width: 1.0),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: const BorderRadius.all(Radius.circular(12.0)),
              borderSide: BorderSide(color: Colors.grey.shade400, width: 1.0),
            ),
            focusedBorder: const OutlineInputBorder(
              borderRadius: BorderRadius.all(Radius.circular(12.0)),
              borderSide: BorderSide(color: primaryOrange, width: 2.0),
            ),
            errorBorder: OutlineInputBorder(
              borderRadius: const BorderRadius.all(Radius.circular(12.0)),
              borderSide: BorderSide(color: Colors.redAccent.shade200, width: 1.0),
            ),
            focusedErrorBorder: OutlineInputBorder(
              borderRadius: const BorderRadius.all(Radius.circular(12.0)),
              borderSide: BorderSide(color: Colors.redAccent.shade400, width: 2.0),
            ),
            contentPadding: const EdgeInsets.symmetric(vertical: 16.0, horizontal: 20.0),
          ),
          elevatedButtonTheme: ElevatedButtonThemeData(
            style: ElevatedButton.styleFrom(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12.0),
              ),
              backgroundColor: primaryOrange,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
              textStyle: const TextStyle(fontFamily: 'Inter', fontSize: 16, fontWeight: FontWeight.w600),
              elevation: 3,
            ),
          ),
          textButtonTheme: TextButtonThemeData(
            style: TextButton.styleFrom(
              foregroundColor: primaryOrange,
              textStyle: const TextStyle(fontFamily: 'Inter', fontWeight: FontWeight.w600),
            )
          ),
          appBarTheme: const AppBarTheme(
            centerTitle: true,
            elevation: 0.8,
            backgroundColor: Colors.white,
            titleTextStyle: TextStyle(
              fontFamily: 'Inter',
              fontSize: 22,
              fontWeight: FontWeight.w900,
              color: textBlackColor,
            ),
            iconTheme: IconThemeData(color: primaryOrange),
            actionsIconTheme: IconThemeData(color: primaryOrange),
          ),
          bottomNavigationBarTheme: BottomNavigationBarThemeData(
            backgroundColor: Colors.white,
            selectedItemColor: textBlackColor,
            unselectedItemColor: primaryOrange.withOpacity(0.7),
            selectedLabelStyle: const TextStyle(fontFamily: 'Inter', fontWeight: FontWeight.w700, fontSize: 11),
            unselectedLabelStyle: const TextStyle(fontFamily: 'Inter', fontWeight: FontWeight.w500, fontSize: 11),
            type: BottomNavigationBarType.fixed,
            showUnselectedLabels: true,
            elevation: 8.0,
          ),
          cardTheme: CardThemeData(
            elevation: 1.5,
            margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12.0)),
            color: Colors.white,
          ),
          floatingActionButtonTheme: const FloatingActionButtonThemeData(
            backgroundColor: primaryOrange,
            foregroundColor: Colors.white,
            elevation: 6.0,
          ),
          listTileTheme: ListTileThemeData(
            iconColor: primaryOrange,
            titleTextStyle: const TextStyle(fontFamily: 'Inter', color: textBlackColor, fontSize: 16, fontWeight: FontWeight.w500),
            subtitleTextStyle: TextStyle(fontFamily: 'Inter', color: Colors.grey[600], fontSize: 14),
          ),
          dialogTheme: DialogThemeData(
            backgroundColor: Colors.white,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16.0)),
            titleTextStyle: const TextStyle(fontFamily: 'Inter', color: textBlackColor, fontSize: 20, fontWeight: FontWeight.w600),
            contentTextStyle: const TextStyle(fontFamily: 'Inter', color: textBlackColor, fontSize: 16),
          ),
           chipTheme: ChipThemeData(
            backgroundColor: Colors.grey[200],
            selectedColor: primaryOrange.withOpacity(0.25),
            labelStyle: const TextStyle(fontFamily: 'Inter', color: textBlackColor, fontWeight: FontWeight.w500),
            secondaryLabelStyle: const TextStyle(fontFamily: 'Inter', color: primaryOrange, fontWeight: FontWeight.w600),
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
            checkmarkColor: primaryOrange,
          ),
        ),
        home: const AuthGate(),
      ),
    );
  }
}
--------------------------------------------------
=== END OF FILE: lib/main.dart ===


=== FILE: lib/core/domain/entities/app_notification.dart ===
--------------------------------------------------
// lib/core/domain/entities/app_notification.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart';

enum NotificationType {
  achievementUnlocked, // Досягнення
  workoutReminder,     // Нагадування про тренування
  newFollower,         // Новий підписник (на майбутнє)
  routineShared,       // Хтось поділився рутиною (на майбутнє)
  systemMessage,       // Системне повідомлення
  custom,              // Інший тип
}

class AppNotification extends Equatable {
  final String id;
  final NotificationType type;
  final String title;
  final String message;
  final Timestamp timestamp;
  final bool isRead;
  final String? relatedEntityId;   // Наприклад, ID досягнення, рутини
  final String? relatedEntityType; // Наприклад, 'achievement', 'routine'
  final String? iconName;          // Назва іконки з Material Icons або кастомної

  const AppNotification({
    required this.id,
    required this.type,
    required this.title,
    required this.message,
    required this.timestamp,
    this.isRead = false,
    this.relatedEntityId,
    this.relatedEntityType,
    this.iconName,
  });

  factory AppNotification.fromFirestore(DocumentSnapshot<Map<String, dynamic>> snapshot) {
    final data = snapshot.data();
    if (data == null) throw Exception("Notification data is null!");

    return AppNotification(
      id: snapshot.id,
      type: _parseNotificationType(data['type'] as String?),
      title: data['title'] ?? 'Notification',
      message: data['message'] ?? '',
      timestamp: data['timestamp'] ?? Timestamp.now(),
      isRead: data['isRead'] ?? false,
      relatedEntityId: data['relatedEntityId'] as String?,
      relatedEntityType: data['relatedEntityType'] as String?,
      iconName: data['iconName'] as String?,
    );
  }

  Map<String, dynamic> toMap() { // Для створення/оновлення
    return {
      // 'id' не потрібен тут, бо це ID документа
      'type': type.name, // Зберігаємо як рядок
      'title': title,
      'message': message,
      'timestamp': timestamp, // Або FieldValue.serverTimestamp() при створенні
      'isRead': isRead,
      if (relatedEntityId != null) 'relatedEntityId': relatedEntityId,
      if (relatedEntityType != null) 'relatedEntityType': relatedEntityType,
      if (iconName != null) 'iconName': iconName,
    };
  }

  AppNotification copyWith({
    String? id,
    NotificationType? type,
    String? title,
    String? message,
    Timestamp? timestamp,
    bool? isRead,
    String? relatedEntityId,
    String? relatedEntityType,
    String? iconName,
  }) {
    return AppNotification(
      id: id ?? this.id,
      type: type ?? this.type,
      title: title ?? this.title,
      message: message ?? this.message,
      timestamp: timestamp ?? this.timestamp,
      isRead: isRead ?? this.isRead,
      relatedEntityId: relatedEntityId ?? this.relatedEntityId,
      relatedEntityType: relatedEntityType ?? this.relatedEntityType,
      iconName: iconName ?? this.iconName,
    );
  }

  @override
  List<Object?> get props => [
        id,
        type,
        title,
        message,
        timestamp,
        isRead,
        relatedEntityId,
        relatedEntityType,
        iconName,
      ];

  static NotificationType _parseNotificationType(String? typeString) {
    if (typeString == null) return NotificationType.custom;
    try {
      return NotificationType.values.byName(typeString);
    } catch (e) {
      return NotificationType.custom; // Тип за замовчуванням, якщо розпарсити не вдалося
    }
  }
}
--------------------------------------------------
=== END OF FILE: lib/core/domain/entities/app_notification.dart ===


=== FILE: lib/core/domain/entities/predefined_exercise.dart ===
--------------------------------------------------
// lib/core/domain/entities/predefined_exercise.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class PredefinedExercise {
  final String id;
  final String name;
  final String normalizedName;
  final String primaryMuscleGroup;
  final List<String> secondaryMuscleGroups;
  final List<String> equipmentNeeded;
  final String description;
  final String? videoDemonstrationUrl;
  final String difficultyLevel;
  final List<String> tags;

  PredefinedExercise({
    required this.id,
    required this.name,
    required this.normalizedName,
    required this.primaryMuscleGroup,
    required this.secondaryMuscleGroups,
    required this.equipmentNeeded,
    required this.description,
    this.videoDemonstrationUrl,
    required this.difficultyLevel,
    required this.tags,
  });

  factory PredefinedExercise.fromFirestore(DocumentSnapshot<Map<String, dynamic>> snapshot) {
    final data = snapshot.data();
    if (data == null) throw Exception("Exercise data is null!");
    return PredefinedExercise(
      id: snapshot.id,
      name: data['name'] ?? '',
      normalizedName: data['normalizedName'] ?? '',
      primaryMuscleGroup: data['primaryMuscleGroup'] ?? '',
      secondaryMuscleGroups: List<String>.from(data['secondaryMuscleGroups'] ?? []),
      equipmentNeeded: List<String>.from(data['equipmentNeeded'] ?? []),
      description: data['description'] ?? '',
      videoDemonstrationUrl: data['videoDemonstrationUrl'],
      difficultyLevel: data['difficultyLevel'] ?? '',
      tags: List<String>.from(data['tags'] ?? []),
    );
  }

  Map<String, dynamic> toJson() { // Необхідно для адмін-панелі або майбутнього створення вправ з додатку
    return {
      'name': name,
      'normalizedName': normalizedName,
      'primaryMuscleGroup': primaryMuscleGroup,
      'secondaryMuscleGroups': secondaryMuscleGroups,
      'equipmentNeeded': equipmentNeeded,
      'description': description,
      'videoDemonstrationUrl': videoDemonstrationUrl,
      'difficultyLevel': difficultyLevel,
      'tags': tags,
    };
  }
}
--------------------------------------------------
=== END OF FILE: lib/core/domain/entities/predefined_exercise.dart ===


=== FILE: lib/core/domain/entities/routine.dart ===
--------------------------------------------------
// lib/core/domain/entities/routine.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart'; // Додай, якщо ще не маєш, для порівняння

// --- RoutineExercise ---
class RoutineExercise extends Equatable { // Зробимо Equatable для зручності
  final String predefinedExerciseId;
  final String exerciseNameSnapshot;
  final int numberOfSets;
  final String? notes;

  const RoutineExercise({ // Додай const
    required this.predefinedExerciseId,
    required this.exerciseNameSnapshot,
    required this.numberOfSets,
    this.notes,
  });

  factory RoutineExercise.fromMap(Map<String, dynamic> map) {
    return RoutineExercise(
      predefinedExerciseId: map['predefinedExerciseId'] ?? '',
      exerciseNameSnapshot: map['exerciseNameSnapshot'] ?? '',
      numberOfSets: map['numberOfSets'] is String
          ? int.tryParse(map['numberOfSets']) ?? 0
          : map['numberOfSets'] ?? 0, // Обробка, якщо numberOfSets приходить як String
      notes: map['notes'],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'predefinedExerciseId': predefinedExerciseId,
      'exerciseNameSnapshot': exerciseNameSnapshot,
      'numberOfSets': numberOfSets,
      'notes': notes,
    };
  }

  RoutineExercise copyWith({
    String? predefinedExerciseId,
    String? exerciseNameSnapshot,
    int? numberOfSets,
    String? notes, // Nullable для скидання значення
    bool allowNullNotes = false, // Прапорець для дозволу встановлення notes в null
  }) {
    return RoutineExercise(
      predefinedExerciseId: predefinedExerciseId ?? this.predefinedExerciseId,
      exerciseNameSnapshot: exerciseNameSnapshot ?? this.exerciseNameSnapshot,
      numberOfSets: numberOfSets ?? this.numberOfSets,
      notes: allowNullNotes ? notes : (notes ?? this.notes),
    );
  }

  @override
  List<Object?> get props => [predefinedExerciseId, exerciseNameSnapshot, numberOfSets, notes];
}

// --- UserRoutine ---
class UserRoutine extends Equatable { // Зробимо Equatable
  final String id;
  final String userId;
  final String name;
  final String? description;
  final List<RoutineExercise> exercises;
  final List<String> scheduledDays;
  final bool isPublic;
  // Додай інші поля згідно з дизайн-документом (communityRatingSum і т.д.)
  final Timestamp createdAt;
  final Timestamp updatedAt;

  const UserRoutine({ // Додай const
    required this.id,
    required this.userId,
    required this.name,
    this.description,
    required this.exercises,
    required this.scheduledDays,
    this.isPublic = false,
    required this.createdAt,
    required this.updatedAt,
  });

  factory UserRoutine.fromFirestore(DocumentSnapshot<Map<String, dynamic>> snapshot) {
    final data = snapshot.data();
    if (data == null) throw Exception("Routine data is null!");
    return UserRoutine(
      id: snapshot.id,
      userId: data['userId'] ?? '',
      name: data['name'] ?? '',
      description: data['description'],
      exercises: (data['exercises'] as List<dynamic>?)
              ?.map((e) => RoutineExercise.fromMap(e as Map<String, dynamic>))
              .toList() ??
          [],
      scheduledDays: List<String>.from(data['scheduledDays'] ?? []),
      isPublic: data['isPublic'] ?? false,
      // Важливо правильно обробляти Timestamps
      createdAt: data['createdAt'] is Timestamp ? data['createdAt'] : Timestamp.now(),
      updatedAt: data['updatedAt'] is Timestamp ? data['updatedAt'] : Timestamp.now(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'userId': userId,
      'name': name,
      'description': description,
      'exercises': exercises.map((e) => e.toMap()).toList(),
      'scheduledDays': scheduledDays,
      'isPublic': isPublic,
      // createdAt та updatedAt краще встановлювати через FieldValue.serverTimestamp() при записі
      // 'createdAt': createdAt, // Закоментуй, якщо встановлюєш через FieldValue
      // 'updatedAt': updatedAt, // Закоментуй, якщо встановлюєш через FieldValue
      // Додай інші поля
    };
  }

  UserRoutine copyWith({
    String? id,
    String? userId,
    String? name,
    String? description, // Nullable для скидання
    List<RoutineExercise>? exercises,
    List<String>? scheduledDays,
    bool? isPublic,
    Timestamp? createdAt,
    Timestamp? updatedAt,
    bool allowNullDescription = false, // Прапорець для дозволу встановлення description в null
  }) {
    return UserRoutine(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      name: name ?? this.name,
      description: allowNullDescription ? description : (description ?? this.description),
      exercises: exercises ?? this.exercises,
      scheduledDays: scheduledDays ?? this.scheduledDays,
      isPublic: isPublic ?? this.isPublic,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  @override
  List<Object?> get props => [
        id,
        userId,
        name,
        description,
        exercises,
        scheduledDays,
        isPublic,
        createdAt,
        updatedAt
      ];
}
--------------------------------------------------
=== END OF FILE: lib/core/domain/entities/routine.dart ===


=== FILE: lib/core/domain/entities/user_profile.dart ===
--------------------------------------------------
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/foundation.dart' show ValueGetter;

class UserProfile extends Equatable {
  final String uid;
  final String? email;
  final String? displayName;
  final String? profilePictureUrl;
  final String? username;
  final String? gender;
  final Timestamp? dateOfBirth;
  final double? heightCm;
  final double? weightKg;
  final String? fitnessGoal;
  final String? activityLevel;
  final int xp;
  final int level;
  final int currentStreak; // <--- ДОДАНО ЦЕ ПОЛЕ
  final int longestStreak; // <--- ДОДАНО ЦЕ ПОЛЕ (опціонально, якщо потрібно)
  final bool profileSetupComplete;
  final Timestamp createdAt;
  final Timestamp updatedAt;

  const UserProfile({
    required this.uid,
    this.email,
    this.displayName,
    this.profilePictureUrl,
    this.username,
    this.gender,
    this.dateOfBirth,
    this.heightCm,
    this.weightKg,
    this.fitnessGoal,
    this.activityLevel,
    required this.xp,
    required this.level,
    this.currentStreak = 0, // <--- Значення за замовчуванням
    this.longestStreak = 0, // <--- Значення за замовчуванням
    required this.profileSetupComplete,
    required this.createdAt,
    required this.updatedAt,
  });

  factory UserProfile.fromFirestore(DocumentSnapshot<Map<String, dynamic>> snapshot) {
    final data = snapshot.data();
    if (data == null) throw Exception("User profile data is null!");
    return UserProfile(
      uid: snapshot.id,
      email: data['email'] as String?,
      displayName: data['displayName'] as String?,
      profilePictureUrl: data['profilePictureUrl'] as String?,
      username: data['username'] as String?,
      gender: data['gender'] as String?,
      dateOfBirth: data['dateOfBirth'] as Timestamp?,
      heightCm: (data['heightCm'] as num?)?.toDouble(),
      weightKg: (data['weightKg'] as num?)?.toDouble(),
      fitnessGoal: data['fitnessGoal'] as String?,
      activityLevel: data['activityLevel'] as String?,
      xp: data['xp'] as int? ?? 0,
      level: data['level'] as int? ?? 1,
      currentStreak: data['currentStreak'] as int? ?? 0, // <--- Зчитування з Firestore
      longestStreak: data['longestStreak'] as int? ?? 0, // <--- Зчитування з Firestore
      profileSetupComplete: data['profileSetupComplete'] as bool? ?? false,
      createdAt: data['createdAt'] as Timestamp? ?? Timestamp.now(),
      updatedAt: data['updatedAt'] as Timestamp? ?? Timestamp.now(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'uid': uid,
      if (email != null) 'email': email,
      if (displayName != null) 'displayName': displayName,
      if (profilePictureUrl != null) 'profilePictureUrl': profilePictureUrl,
      if (username != null) 'username': username,
      if (gender != null) 'gender': gender,
      if (dateOfBirth != null) 'dateOfBirth': dateOfBirth,
      if (heightCm != null) 'heightCm': heightCm,
      if (weightKg != null) 'weightKg': weightKg,
      if (fitnessGoal != null) 'fitnessGoal': fitnessGoal,
      if (activityLevel != null) 'activityLevel': activityLevel,
      'xp': xp,
      'level': level,
      'currentStreak': currentStreak, // <--- Додано для запису
      'longestStreak': longestStreak, // <--- Додано для запису
      'profileSetupComplete': profileSetupComplete,
    };
  }

  UserProfile copyWith({
    String? uid,
    String? email,
    ValueGetter<String?>? displayName,
    ValueGetter<String?>? profilePictureUrl,
    ValueGetter<String?>? username,
    ValueGetter<String?>? gender,
    ValueGetter<Timestamp?>? dateOfBirth,
    ValueGetter<double?>? heightCm,
    ValueGetter<double?>? weightKg,
    ValueGetter<String?>? fitnessGoal,
    ValueGetter<String?>? activityLevel,
    int? xp,
    int? level,
    int? currentStreak, // <--- Додано
    int? longestStreak, // <--- Додано
    bool? profileSetupComplete,
    Timestamp? createdAt,
    Timestamp? updatedAt,
  }) {
    return UserProfile(
      uid: uid ?? this.uid,
      email: email ?? this.email,
      displayName: displayName != null ? displayName() : this.displayName,
      profilePictureUrl: profilePictureUrl != null ? profilePictureUrl() : this.profilePictureUrl,
      username: username != null ? username() : this.username,
      gender: gender != null ? gender() : this.gender,
      dateOfBirth: dateOfBirth != null ? dateOfBirth() : this.dateOfBirth,
      heightCm: heightCm != null ? heightCm() : this.heightCm,
      weightKg: weightKg != null ? weightKg() : this.weightKg,
      fitnessGoal: fitnessGoal != null ? fitnessGoal() : this.fitnessGoal,
      activityLevel: activityLevel != null ? activityLevel() : this.activityLevel,
      xp: xp ?? this.xp,
      level: level ?? this.level,
      currentStreak: currentStreak ?? this.currentStreak, // <--- Додано
      longestStreak: longestStreak ?? this.longestStreak, // <--- Додано
      profileSetupComplete: profileSetupComplete ?? this.profileSetupComplete,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  @override
  List<Object?> get props => [
        uid, email, displayName, profilePictureUrl, username, gender, dateOfBirth,
        heightCm, weightKg, fitnessGoal, activityLevel, xp, level,
        currentStreak, longestStreak, // <--- Додано
        profileSetupComplete, createdAt, updatedAt
      ];
}
--------------------------------------------------
=== END OF FILE: lib/core/domain/entities/user_profile.dart ===


=== FILE: lib/core/domain/repositories/notification_repository.dart ===
--------------------------------------------------
// lib/core/domain/repositories/notification_repository.dart
import '../entities/app_notification.dart';

abstract class NotificationRepository {
  Stream<List<AppNotification>> getUserNotificationsStream(String userId);
  Stream<int> getUnreadNotificationsCountStream(String userId);
  Future<void> markNotificationAsRead(String userId, String notificationId);
  Future<void> markAllNotificationsAsRead(String userId);
  // Можливо, Future<void> createNotification(String userId, AppNotification notification); (для адмінки/тестів)
}
--------------------------------------------------
=== END OF FILE: lib/core/domain/repositories/notification_repository.dart ===


=== FILE: lib/core/domain/repositories/predefined_exercise_repository.dart ===
--------------------------------------------------
// lib/core/domain/repositories/predefined_exercise_repository.dart
import '../entities/predefined_exercise.dart';

abstract class PredefinedExerciseRepository {
  Future<List<PredefinedExercise>> getAllExercises();
  // В майбутньому: Future<List<PredefinedExercise>> searchExercises(String query);
  // В майбутньому: Future<List<PredefinedExercise>> filterExercises(Map<String, dynamic> filters);
}
--------------------------------------------------
=== END OF FILE: lib/core/domain/repositories/predefined_exercise_repository.dart ===


=== FILE: lib/core/domain/repositories/routine_repository.dart ===
--------------------------------------------------
// lib/core/domain/repositories/routine_repository.dart
import '../entities/routine.dart'; // Перевір цей імпорт також

abstract class RoutineRepository { // <-- Ключове слово "abstract class"
  Future<void> createRoutine(UserRoutine routine);
  Future<List<UserRoutine>> getUserRoutines(String userId);
  Future<void> updateRoutine(UserRoutine routine);
  Future<void> deleteRoutine(String routineId);
}
--------------------------------------------------
=== END OF FILE: lib/core/domain/repositories/routine_repository.dart ===


=== FILE: lib/core/domain/repositories/user_profile_repository.dart ===
--------------------------------------------------
import '../entities/user_profile.dart';

abstract class UserProfileRepository {
  Future<UserProfile?> getUserProfile(String userId);
  Future<void> updateUserProfile(UserProfile userProfile);
  Stream<UserProfile?> getUserProfileStream(String userId); // <--- НОВИЙ МЕТОД
}

--------------------------------------------------
=== END OF FILE: lib/core/domain/repositories/user_profile_repository.dart ===


=== FILE: lib/features/dashboard/presentation/screens/dashboard_screen.dart ===
--------------------------------------------------
// lib/features/dashboard/presentation/screens/dashboard_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'dart:developer' as developer;

// Removed unused import: import '../../../../core/domain/entities/user_profile.dart';
// Removed unused import: import '../../../../core/domain/entities/app_notification.dart';
// Corrected import path for NotificationListItem
import '../../../notifications/presentation/widgets/notification_list_item.dart';
import '../../../profile/presentation/cubit/user_profile_cubit.dart';
import '../../../notifications/presentation/cubit/notifications_cubit.dart';
// Import for NotificationType if _createTestNotifications is used
// import '../../../../core/domain/entities/app_notification.dart';


class DashboardScreen extends StatelessWidget {
  final VoidCallback onProfileTap;
  final VoidCallback onProgressTap;
  final VoidCallback onNotificationsTap;

  const DashboardScreen({
    super.key,
    required this.onProfileTap,
    required this.onProgressTap,
    required this.onNotificationsTap,
  });

  static const Color primaryOrange = Color(0xFFED5D1A);
  static const Color textBlack = Colors.black87;
  static const String ibmPlexMonoFont = 'IBMPlexMono';

  Widget _buildStatsItem(BuildContext context, String value, String label) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Text(
          value,
          style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: primaryOrange,
                fontWeight: FontWeight.bold,
                fontSize: 22,
              ),
        ),
        const SizedBox(height: 4),
        Text(
          label,
          style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                color: textBlack,
                fontFamily: ibmPlexMonoFont,
                fontWeight: FontWeight.bold,
                fontSize: 13,
              ),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    developer.log("DashboardScreen: Building UI", name: "DashboardScreen");

    // void _createTestNotifications(BuildContext ctx) {
    //   final cubit = ctx.read<NotificationsCubit>();
    //   // Make sure NotificationType is imported if you use this
    //   // cubit.createTestNotification(title: "Achievement Unlocked!", message: "You've completed your first workout!", type: NotificationType.achievementUnlocked);
    //   // cubit.createTestNotification(title: "Workout Reminder", message: "Time for your Legs Day session.", type: NotificationType.workoutReminder);
    //   // cubit.createTestNotification(title: "System Update", message: "New features available in the app.", type: NotificationType.systemMessage);
    //   developer.log("Test notifications creation requested", name: "DashboardScreen");
    // }

    return BlocBuilder<UserProfileCubit, UserProfileState>(
      builder: (context, userState) {
        developer.log("DashboardScreen: UserProfileCubit state: $userState", name: "DashboardScreen");

        String greetingName = 'User';
        String weightStat = '-- KG';
        String streakStat = '0 DAY';
        String currentStreakForIcon = "0";

        if (userState is UserProfileLoaded) {
          final userProfile = userState.userProfile;
          greetingName = userProfile.displayName?.isNotEmpty == true
              ? userProfile.displayName!.split(' ').first
              : userProfile.username?.isNotEmpty == true
                  ? userProfile.username!
                  : userProfile.email?.split('@').first ?? 'User';
          weightStat = userProfile.weightKg != null
              ? '${userProfile.weightKg!.toStringAsFixed(1)} KG'
              : '-- KG';
          streakStat = '${userProfile.currentStreak} DAY';
          currentStreakForIcon = userProfile.currentStreak.toString();
        } else if (userState is UserProfileLoading) {
          greetingName = 'Loading...';
          weightStat = '... KG';
          streakStat = '... DAY';
          currentStreakForIcon = "...";
        } else if (userState is UserProfileError) {
          greetingName = 'Error';
          weightStat = 'N/A';
          streakStat = 'N/A';
          currentStreakForIcon = "!";
        } else if (userState is UserProfileInitial) {
           developer.log("DashboardScreen: UserProfileInitial, waiting for load.", name: "DashboardScreen");
        }

        return SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: <Widget>[
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Expanded(
                    child: GestureDetector(
                      onTap: onProfileTap,
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Welcome,',
                            style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                                  color: textBlack,
                                  fontWeight: FontWeight.w900,
                                ),
                          ),
                          Text(
                            greetingName,
                            style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                                  color: primaryOrange,
                                  fontWeight: FontWeight.w900,
                                ),
                          ),
                        ],
                      ),
                    ),
                  ),
                  GestureDetector(
                    onTap: onProgressTap,
                    child: Row(
                      children: [
                        const Icon(Icons.local_fire_department, color: primaryOrange, size: 32),
                        const SizedBox(width: 6),
                        Text(
                          currentStreakForIcon,
                          style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                                color: primaryOrange,
                                fontWeight: FontWeight.bold,
                              ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 24),
              Text(
                'STATS',
                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                      color: textBlack,
                      fontFamily: ibmPlexMonoFont,
                      fontWeight: FontWeight.bold,
                    ),
              ),
              const SizedBox(height: 8),
              Container(
                height: 150,
                decoration: BoxDecoration(
                  // Fixed deprecated withOpacity
                  color: Theme.of(context).colorScheme.primary.withAlpha((0.1 * 255).round()),
                  borderRadius: BorderRadius.circular(12),
                  // Fixed deprecated withOpacity
                  border: Border.all(color: Theme.of(context).colorScheme.primary.withAlpha((0.3 * 255).round()))
                ),
                child: const Center(
                  child: Padding(
                    padding: EdgeInsets.all(8.0),
                    child: Text(
                      'TOTAL VOLUME OVER LAST 7 DAYS GRAPH PLACEHOLDER',
                      textAlign: TextAlign.center,
                      style: TextStyle(color: textBlack, fontWeight: FontWeight.w500, fontSize: 13),
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 20),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  _buildStatsItem(context, weightStat, 'WEIGHT'),
                  _buildStatsItem(context, streakStat, 'STREAK'),
                  _buildStatsItem(context, '100%', 'ADHERENCE'),
                ],
              ),
              const SizedBox(height: 32),
              BlocBuilder<NotificationsCubit, NotificationsState>(
                builder: (context, notificationsState) {
                  int unreadNotificationsCount = 0;
                  if (notificationsState is NotificationsLoaded) {
                    unreadNotificationsCount = notificationsState.unreadCount;
                  }
                  developer.log("Dashboard NotificationsCubit state: $notificationsState, unreadCount: $unreadNotificationsCount", name: "DashboardScreen.Notifications");
                  return Row(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      Text(
                        'NOTIFICATIONS',
                        style: Theme.of(context).textTheme.titleMedium?.copyWith(
                              color: textBlack,
                              fontFamily: ibmPlexMonoFont,
                              fontWeight: FontWeight.bold,
                            ),
                      ),
                      const SizedBox(width: 8),
                      if (unreadNotificationsCount > 0)
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 7, vertical: 3),
                          decoration: const BoxDecoration(
                            color: primaryOrange,
                            shape: BoxShape.circle,
                          ),
                          child: Text(
                            '$unreadNotificationsCount',
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 11,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      const Spacer(),
                      if (notificationsState is NotificationsLoaded && notificationsState.notifications.isNotEmpty)
                        TextButton(
                          onPressed: onNotificationsTap,
                          child: const Text('View All'),
                        )
                    ],
                  );
                },
              ),
              const SizedBox(height: 8),
              BlocBuilder<NotificationsCubit, NotificationsState>(
                builder: (context, notificationsState) {
                  // Fixed prefer_is_not_operator
                  if (notificationsState is NotificationsLoading && notificationsState is! NotificationsLoaded) {
                    return const Center(child: Padding(
                      padding: EdgeInsets.symmetric(vertical: 20.0),
                      child: CircularProgressIndicator(),
                    ));
                  } else if (notificationsState is NotificationsLoaded) {
                    final notificationsToShow = notificationsState.notifications.take(3).toList();
                    if (notificationsToShow.isEmpty) {
                      return const Padding(
                        padding: EdgeInsets.symmetric(vertical: 20.0),
                        child: Center(
                          child: Text(
                            'No new notifications.',
                            style: TextStyle(color: Colors.grey),
                          ),
                        ),
                      );
                    }
                    return ListView.builder(
                      shrinkWrap: true,
                      physics: const NeverScrollableScrollPhysics(),
                      itemCount: notificationsToShow.length,
                      itemBuilder: (context, index) {
                        // This assumes NotificationListItem is correctly imported and defined
                        return NotificationListItem(notification: notificationsToShow[index]);
                      },
                    );
                  } else if (notificationsState is NotificationsError) {
                    return Padding(
                      padding: const EdgeInsets.symmetric(vertical: 20.0),
                      child: Center(
                        child: Text(
                          'Error loading notifications: ${notificationsState.message}',
                          style: const TextStyle(color: Colors.red),
                          textAlign: TextAlign.center,
                        ),
                      ),
                    );
                  }
                  return const Padding(
                    padding: EdgeInsets.symmetric(vertical: 20.0),
                    child: Center(child: Text('Loading notifications...')),
                  );
                },
              ),
              const SizedBox(height: 70),
            ],
          ),
        );
      },
    );
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/dashboard/presentation/screens/dashboard_screen.dart ===


=== FILE: lib/features/exercise_explorer/data/repositories/predefined_exercise_repository_impl.dart ===
--------------------------------------------------
// lib/features/exercise_explorer/data/repositories/predefined_exercise_repository_impl.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../../../core/domain/entities/predefined_exercise.dart';
import '../../../../core/domain/repositories/predefined_exercise_repository.dart';
import 'dart:developer' as developer; // Для логування


class PredefinedExerciseRepositoryImpl implements PredefinedExerciseRepository {
  final FirebaseFirestore _firestore;

  PredefinedExerciseRepositoryImpl({FirebaseFirestore? firestore})
      : _firestore = firestore ?? FirebaseFirestore.instance;

  @override
  Future<List<PredefinedExercise>> getAllExercises() async {
    try {
      final snapshot = await _firestore.collection('predefinedExercises').orderBy('name').get(); // Сортуємо за назвою
      return snapshot.docs
          .map((doc) => PredefinedExercise.fromFirestore(doc as DocumentSnapshot<Map<String, dynamic>>))
          .toList();
    } catch (e) {
      developer.log("Error fetching exercises: $e", name: "PredefinedExerciseRepo");
      throw Exception('Failed to fetch predefined exercises.');
    }
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/exercise_explorer/data/repositories/predefined_exercise_repository_impl.dart ===


=== FILE: lib/features/exercise_explorer/data/repositories/routine_repository_impl.dart ===
--------------------------------------------------
// lib/features/routines/data/repositories/routine_repository_impl.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart'; // Для отримання поточного userId
import '../../../../core/domain/entities/routine.dart';
import '../../../../core/domain/repositories/routine_repository.dart';

class RoutineRepositoryImpl implements RoutineRepository {
  final FirebaseFirestore _firestore;
  final FirebaseAuth _firebaseAuth; // Додано

  RoutineRepositoryImpl({FirebaseFirestore? firestore, FirebaseAuth? firebaseAuth}) // Оновлено
    : _firestore = firestore ?? FirebaseFirestore.instance,
      _firebaseAuth = firebaseAuth ?? FirebaseAuth.instance; // Оновлено

  @override
  Future<void> createRoutine(UserRoutine routine) async {
    try {
      final docRef = _firestore.collection('userRoutines').doc();
      // Встановлюємо createdAt та updatedAt на серверний час при створенні
      final routineData = routine.toMap()
        ..['createdAt'] = FieldValue.serverTimestamp()
        ..['updatedAt'] = FieldValue.serverTimestamp();
      await docRef.set(routineData);
    } catch (e) {
      print("Error creating routine: $e");
      throw Exception('Failed to create routine.');
    }
  }

  @override
  Future<List<UserRoutine>> getUserRoutines(String userId) async {
    try {
      final snapshot = await _firestore
          .collection('userRoutines')
          .where('userId', isEqualTo: userId)
          .orderBy('createdAt', descending: true) // Сортування за датою створення
          .get();
      return snapshot.docs
          .map((doc) => UserRoutine.fromFirestore(doc as DocumentSnapshot<Map<String, dynamic>>))
          .toList();
    } catch (e) {
      print("Error fetching user routines: $e");
      throw Exception('Failed to fetch user routines.');
    }
  }

  @override
  Future<void> updateRoutine(UserRoutine routine) async {
    try {
      final routineData = routine.toMap()..['updatedAt'] = FieldValue.serverTimestamp();
      await _firestore.collection('userRoutines').doc(routine.id).update(routineData);
    } catch (e) {
      print("Error updating routine: $e");
      throw Exception('Failed to update routine.');
    }
  }

  @override
  Future<void> deleteRoutine(String routineId) async {
    try {
      await _firestore.collection('userRoutines').doc(routineId).delete();
    } catch (e) {
      print("Error deleting routine: $e");
      throw Exception('Failed to delete routine.');
    }
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/exercise_explorer/data/repositories/routine_repository_impl.dart ===


=== FILE: lib/features/exercise_explorer/presentation/cubit/exercise_explorer_cubit.dart ===
--------------------------------------------------
// lib/features/exercise_explorer/presentation/cubit/exercise_explorer_cubit.dart
import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import '../../../../core/domain/entities/predefined_exercise.dart';
import '../../../../core/domain/repositories/predefined_exercise_repository.dart'; // Абстракція

part 'exercise_explorer_state.dart';

class ExerciseExplorerCubit extends Cubit<ExerciseExplorerState> {
  final PredefinedExerciseRepository _exerciseRepository;

  ExerciseExplorerCubit(this._exerciseRepository) : super(ExerciseExplorerInitial());

  Future<void> fetchExercises() async {
    emit(ExerciseExplorerLoading());
    try {
      final exercises = await _exerciseRepository.getAllExercises();
      emit(ExerciseExplorerLoaded(exercises));
    } catch (e) {
      emit(ExerciseExplorerError(e.toString()));
    }
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/exercise_explorer/presentation/cubit/exercise_explorer_cubit.dart ===


=== FILE: lib/features/exercise_explorer/presentation/cubit/exercise_explorer_state.dart ===
--------------------------------------------------
// lib/features/exercise_explorer/presentation/cubit/exercise_explorer_state.dart
part of 'exercise_explorer_cubit.dart';

abstract class ExerciseExplorerState extends Equatable {
  const ExerciseExplorerState();
  @override
  List<Object?> get props => [];
}

class ExerciseExplorerInitial extends ExerciseExplorerState {}
class ExerciseExplorerLoading extends ExerciseExplorerState {}
class ExerciseExplorerLoaded extends ExerciseExplorerState {
  final List<PredefinedExercise> exercises;
  const ExerciseExplorerLoaded(this.exercises);
  @override
  List<Object?> get props => [exercises];
}
class ExerciseExplorerError extends ExerciseExplorerState {
  final String message;
  const ExerciseExplorerError(this.message);
  @override
  List<Object?> get props => [message];
}
--------------------------------------------------
=== END OF FILE: lib/features/exercise_explorer/presentation/cubit/exercise_explorer_state.dart ===


=== FILE: lib/features/exercise_explorer/presentation/screens/exercise_explorer_screen.dart ===
--------------------------------------------------
// lib/features/exercise_explorer/presentation/screens/exercise_explorer_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../cubit/exercise_explorer_cubit.dart';
// Тимчасово для простоти, краще через DI
// import '../../data/repositories/predefined_exercise_repository_impl.dart'; 
import '../../../../core/domain/repositories/predefined_exercise_repository.dart'; // Імпорт абстракції
import '../widgets/exercise_list_item.dart';

class ExerciseExplorerScreen extends StatelessWidget {
  final bool isSelectionMode;

  const ExerciseExplorerScreen({super.key, this.isSelectionMode = false});

  @override
  Widget build(BuildContext context) {
    // Якщо ExerciseExplorerScreen не надає BlocProvider сам, а очікує його ззовні,
    // то тут BlocProvider не потрібен. Але якщо він його створює, то так:
    return BlocProvider<ExerciseExplorerCubit>( // Уточнено тип
      create: (context) => ExerciseExplorerCubit(
        RepositoryProvider.of<PredefinedExerciseRepository>(context), // Отримуємо з контексту
      )..fetchExercises(),
      child: Scaffold(
        appBar: isSelectionMode // Показуємо AppBar тільки якщо це не режим вибору, бо HomePage вже має AppBar
            ? AppBar(
                title: Text(isSelectionMode ? 'Select Exercise' : 'Exercise Library'),
                 // Кнопка назад буде автоматично, якщо це не корінь навігатора
              )
            : null, // Немає AppBar, якщо це вкладка в HomePage
        body: BlocBuilder<ExerciseExplorerCubit, ExerciseExplorerState>(
          builder: (context, state) {
            if (state is ExerciseExplorerInitial && !isSelectionMode) {
              // Можна викликати fetchExercises, якщо він не був викликаний при створенні кубіта
              // context.read<ExerciseExplorerCubit>().fetchExercises();
              // Або просто показувати завантаження
               return const Center(child: CircularProgressIndicator());
            }
            if (state is ExerciseExplorerLoading) {
              return const Center(child: CircularProgressIndicator());
            } else if (state is ExerciseExplorerLoaded) {
              if (state.exercises.isEmpty) {
                return const Center(
                  child: Padding(
                    padding: EdgeInsets.all(16.0),
                    child: Text('No exercises found in the library yet. Content is being added!', textAlign: TextAlign.center),
                  )
                );
              }
              return ListView.builder(
                padding: const EdgeInsets.only(top: 8, bottom: 8), // Додамо відступи, якщо AppBar немає
                itemCount: state.exercises.length,
                itemBuilder: (context, index) {
                  final exercise = state.exercises[index];
                  return ExerciseListItem(
                    exercise: exercise,
                    isSelectionMode: isSelectionMode,
                  );
                },
              );
            } else if (state is ExerciseExplorerError) {
              return Center(
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Icon(Icons.error_outline, color: Colors.red, size: 48),
                      const SizedBox(height: 16),
                      Text('Error loading exercises: ${state.message}', textAlign: TextAlign.center),
                       const SizedBox(height: 16),
                      ElevatedButton(
                        onPressed: () => context.read<ExerciseExplorerCubit>().fetchExercises(),
                        child: const Text('Try Again'),
                      )
                    ],
                  ),
                )
              );
            }
            return const Center(child: Text('Loading exercises...'));
          },
        ),
      ),
    );
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/exercise_explorer/presentation/screens/exercise_explorer_screen.dart ===


=== FILE: lib/features/exercise_explorer/presentation/widgets/exercise_list_item.dart ===
--------------------------------------------------
// lib/features/exercise_explorer/presentation/widgets/exercise_list_item.dart
import 'package:flutter/material.dart';
import '../../../../core/domain/entities/predefined_exercise.dart';

class ExerciseListItem extends StatelessWidget {
  final PredefinedExercise exercise;
  final bool isSelectionMode; // <--- ДОДАНО

  const ExerciseListItem({
    super.key, 
    required this.exercise,
    this.isSelectionMode = false, // <--- ДОДАНО
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: ListTile(
        title: Text(exercise.name),
        subtitle: Text(exercise.primaryMuscleGroup),
        trailing: isSelectionMode ? const Icon(Icons.add_circle_outline) : const Icon(Icons.arrow_forward_ios),
        onTap: () {
          if (isSelectionMode) {
            Navigator.pop(context, exercise); // Повертаємо обрану вправу
          } else {
            // TODO: Навігація на детальний екран вправи
            // Наприклад: Navigator.push(context, MaterialPageRoute(builder: (_) => ExerciseDetailScreen(exercise: exercise)));
            // log('Tapped on ${exercise.name} for details'); // Використовуй логгер
          }
        },
      ),
    );
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/exercise_explorer/presentation/widgets/exercise_list_item.dart ===


=== FILE: lib/features/notifications/data/repositories/notification_repository_impl.dart ===
--------------------------------------------------
// lib/features/notifications/data/repositories/notification_repository_impl.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:async';
import 'dart:developer' as developer;

import '../../../../core/domain/entities/app_notification.dart';
import '../../../../core/domain/repositories/notification_repository.dart';

class NotificationRepositoryImpl implements NotificationRepository {
  final FirebaseFirestore _firestore;

  NotificationRepositoryImpl({FirebaseFirestore? firestore})
      : _firestore = firestore ?? FirebaseFirestore.instance;

  CollectionReference<Map<String, dynamic>> _userNotificationsCollection(String userId) {
    return _firestore.collection('users').doc(userId).collection('notifications');
  }

  @override
  Stream<List<AppNotification>> getUserNotificationsStream(String userId) {
    if (userId.isEmpty) return Stream.value([]); // Або Stream.error
    developer.log('Subscribing to notifications for user: $userId', name: 'NotificationRepoImpl');
    return _userNotificationsCollection(userId)
        .orderBy('timestamp', descending: true)
        .snapshots()
        .map((snapshot) {
      developer.log('Received ${snapshot.docs.length} notifications for user: $userId', name: 'NotificationRepoImpl');
      return snapshot.docs
          .map((doc) => AppNotification.fromFirestore(doc))
          .toList();
    }).handleError((error, stackTrace) {
       developer.log('Error in notifications stream for user $userId: $error', error: error, stackTrace: stackTrace, name: 'NotificationRepoImpl');
       // Повертаємо порожній список або перекидаємо помилку, залежно від стратегії
       return <AppNotification>[]; 
    });
  }

  @override
  Stream<int> getUnreadNotificationsCountStream(String userId) {
    if (userId.isEmpty) return Stream.value(0);
    developer.log('Subscribing to unread notifications count for user: $userId', name: 'NotificationRepoImpl');
    return _userNotificationsCollection(userId)
        .where('isRead', isEqualTo: false)
        .snapshots()
        .map((snapshot) {
          developer.log('Unread count for $userId: ${snapshot.docs.length}', name: 'NotificationRepoImpl');
          return snapshot.docs.length;
        })
        .handleError((error, stackTrace) {
          developer.log('Error in unread count stream for $userId: $error', error: error, stackTrace: stackTrace, name: 'NotificationRepoImpl');
          return 0;
        });
  }

  @override
  Future<void> markNotificationAsRead(String userId, String notificationId) async {
    if (userId.isEmpty || notificationId.isEmpty) return;
    developer.log('Marking notification $notificationId as read for user $userId', name: 'NotificationRepoImpl');
    try {
      await _userNotificationsCollection(userId).doc(notificationId).update({'isRead': true});
    } catch (e, s) {
      developer.log('Error marking notification $notificationId as read for $userId: $e', error: e, stackTrace: s, name: 'NotificationRepoImpl');
      throw Exception('Failed to mark notification as read: ${e.toString()}');
    }
  }

  @override
  Future<void> markAllNotificationsAsRead(String userId) async {
    if (userId.isEmpty) return;
    developer.log('Marking all notifications as read for user $userId', name: 'NotificationRepoImpl');
    try {
      final unreadNotifications = await _userNotificationsCollection(userId)
          .where('isRead', isEqualTo: false)
          .get();

      if (unreadNotifications.docs.isEmpty) {
        developer.log('No unread notifications to mark for user $userId', name: 'NotificationRepoImpl');
        return;
      }

      WriteBatch batch = _firestore.batch();
      for (var doc in unreadNotifications.docs) {
        batch.update(doc.reference, {'isRead': true});
      }
      await batch.commit();
      developer.log('Marked ${unreadNotifications.docs.length} notifications as read for $userId', name: 'NotificationRepoImpl');
    } catch (e, s) {
      developer.log('Error marking all notifications as read for $userId: $e', error: e, stackTrace: s, name: 'NotificationRepoImpl');
      throw Exception('Failed to mark all notifications as read: ${e.toString()}');
    }
  }

  // Допоміжний метод для створення тестових сповіщень (використовувати обережно)
  Future<void> createTestNotification(String userId, {required String title, required String message, NotificationType type = NotificationType.custom}) async {
    if (userId.isEmpty) return;
    final newNotif = AppNotification(
      id: '', // Firestore сам згенерує
      type: type,
      title: title,
      message: message,
      timestamp: Timestamp.now(),
      isRead: false,
      iconName: type == NotificationType.achievementUnlocked ? 'emoji_events' : 'notifications',
    );
    try {
      await _userNotificationsCollection(userId).add(newNotif.toMap()..['timestamp'] = FieldValue.serverTimestamp());
      developer.log('Test notification created for $userId', name: 'NotificationRepoImpl');
    } catch (e,s) {
      developer.log('Error creating test notification for $userId: $e', error: e, stackTrace: s, name: 'NotificationRepoImpl');
    }
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/notifications/data/repositories/notification_repository_impl.dart ===


=== FILE: lib/features/notifications/presentation/cubit/notifications_cubit.dart ===
--------------------------------------------------
// lib/features/notifications/presentation/cubit/notifications_cubit.dart
import 'dart:async';
// Changed import from 'package:bloc/bloc.dart' to 'package:flutter_bloc/flutter_bloc.dart'
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:firebase_auth/firebase_auth.dart' as fb_auth;
import 'dart:developer' as developer;

import '../../../../core/domain/entities/app_notification.dart';
import '../../../../core/domain/repositories/notification_repository.dart';
// Added import for NotificationRepositoryImpl for the debug helper
import '../../data/repositories/notification_repository_impl.dart';


part 'notifications_state.dart';

class NotificationsCubit extends Cubit<NotificationsState> {
  final NotificationRepository _notificationRepository;
  final fb_auth.FirebaseAuth _firebaseAuth;

  StreamSubscription<List<AppNotification>>? _notificationsSubscription;
  StreamSubscription<int>? _unreadCountSubscription;
  StreamSubscription<fb_auth.User?>? _authStateSubscription;

  String? _currentUserId;

  NotificationsCubit(this._notificationRepository, this._firebaseAuth)
      : super(NotificationsInitial()) {
    _authStateSubscription = _firebaseAuth.authStateChanges().listen((user) {
      if (user != null) {
        _currentUserId = user.uid;
        _subscribeToNotifications(user.uid);
      } else {
        _currentUserId = null;
        _unsubscribeFromNotifications();
        emit(NotificationsInitial());
      }
    });
    final currentUser = _firebaseAuth.currentUser;
    if (currentUser != null) {
      _currentUserId = currentUser.uid;
      _subscribeToNotifications(currentUser.uid);
    }
  }

  void _subscribeToNotifications(String userId) {
    developer.log('NotificationsCubit: Subscribing for user $userId', name: 'NotificationsCubit');
    _unsubscribeFromNotifications();

    emit(NotificationsLoading());

    List<AppNotification> currentNotifications = [];
    int currentUnreadCount = 0;
    bool firstLoadNotifications = true;
    bool firstLoadUnreadCount = true;

    _notificationsSubscription = _notificationRepository
        .getUserNotificationsStream(userId)
        .listen((notifications) {
      developer.log('NotificationsCubit: Received ${notifications.length} notifications', name: 'NotificationsCubit');
      currentNotifications = notifications;
      firstLoadNotifications = false;
      if (!firstLoadUnreadCount) {
         emit(NotificationsLoaded(notifications: currentNotifications, unreadCount: currentUnreadCount));
      } else if (state is NotificationsLoading && !firstLoadNotifications && !firstLoadUnreadCount) {
        emit(NotificationsLoaded(notifications: currentNotifications, unreadCount: currentUnreadCount));
      } else if (state is! NotificationsLoaded && !firstLoadNotifications && !firstLoadUnreadCount) {
         emit(NotificationsLoaded(notifications: currentNotifications, unreadCount: currentUnreadCount));
      }
    }, onError: (error) {
      developer.log('NotificationsCubit: Error in notifications stream: $error', name: 'NotificationsCubit');
      emit(NotificationsError('Failed to load notifications: ${error.toString()}'));
    });

    _unreadCountSubscription = _notificationRepository
        .getUnreadNotificationsCountStream(userId)
        .listen((count) {
      developer.log('NotificationsCubit: Received unread count: $count', name: 'NotificationsCubit');
      currentUnreadCount = count;
      firstLoadUnreadCount = false;
      if (!firstLoadNotifications) {
        emit(NotificationsLoaded(notifications: currentNotifications, unreadCount: currentUnreadCount));
      } else if (state is NotificationsLoading && !firstLoadNotifications && !firstLoadUnreadCount) {
        emit(NotificationsLoaded(notifications: currentNotifications, unreadCount: currentUnreadCount));
      } else if (state is! NotificationsLoaded && !firstLoadNotifications && !firstLoadUnreadCount) {
         emit(NotificationsLoaded(notifications: currentNotifications, unreadCount: currentUnreadCount));
      }
    }, onError: (error) {
      developer.log('NotificationsCubit: Error in unread count stream: $error', name: 'NotificationsCubit');
      if (state is NotificationsLoaded) {
        emit((state as NotificationsLoaded).copyWith(unreadCount: 0));
      } else {
        emit(NotificationsError('Failed to load unread count: ${error.toString()}'));
      }
    });
  }

  void _unsubscribeFromNotifications() {
    developer.log('NotificationsCubit: Unsubscribing', name: 'NotificationsCubit');
    _notificationsSubscription?.cancel();
    _notificationsSubscription = null;
    _unreadCountSubscription?.cancel();
    _unreadCountSubscription = null;
  }

  Future<void> markNotificationAsRead(String notificationId) async {
    final userId = _currentUserId;
    if (userId == null || notificationId.isEmpty) return;
    developer.log('NotificationsCubit: Marking notification $notificationId as read for user $userId', name: 'NotificationsCubit');
    try {
      await _notificationRepository.markNotificationAsRead(userId, notificationId);
      if (state is NotificationsLoaded) {
        final currentState = state as NotificationsLoaded;
        final updatedNotifications = currentState.notifications.map((n) {
          return n.id == notificationId ? n.copyWith(isRead: true) : n;
        }).toList();
        final newUnreadCount = updatedNotifications.where((n) => !n.isRead).length;
        emit(NotificationsLoaded(notifications: updatedNotifications, unreadCount: newUnreadCount));
      }
    } catch (e) {
      developer.log('NotificationsCubit: Error marking notification as read: $e', name: 'NotificationsCubit');
    }
  }

  Future<void> markAllNotificationsAsRead() async {
    final userId = _currentUserId;
    if (userId == null) return;
    developer.log('NotificationsCubit: Marking all notifications as read for user $userId', name: 'NotificationsCubit');
    try {
      await _notificationRepository.markAllNotificationsAsRead(userId);
       if (state is NotificationsLoaded) {
        final currentState = state as NotificationsLoaded;
        final updatedNotifications = currentState.notifications.map((n) => n.copyWith(isRead: true)).toList();
        emit(NotificationsLoaded(notifications: updatedNotifications, unreadCount: 0));
      }
    } catch (e) {
      developer.log('NotificationsCubit: Error marking all notifications as read: $e', name: 'NotificationsCubit');
    }
  }

  Future<void> createTestNotification({required String title, required String message, NotificationType type = NotificationType.custom}) async {
    final userId = _currentUserId;
    if (userId == null) return;
    // Fixed type check and cast
    if (_notificationRepository is NotificationRepositoryImpl) {
     await (_notificationRepository as NotificationRepositoryImpl).createTestNotification(userId, title: title, message: message, type: type);
    }
  }

  @override
  Future<void> close() {
    developer.log('NotificationsCubit: Closing', name: 'NotificationsCubit');
    _authStateSubscription?.cancel();
    _unsubscribeFromNotifications();
    return super.close();
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/notifications/presentation/cubit/notifications_cubit.dart ===


=== FILE: lib/features/notifications/presentation/cubit/notifications_state.dart ===
--------------------------------------------------
// lib/features/notifications/presentation/cubit/notifications_state.dart
part of 'notifications_cubit.dart';

abstract class NotificationsState extends Equatable {
  const NotificationsState();

  @override
  List<Object?> get props => [];
}

class NotificationsInitial extends NotificationsState {}

class NotificationsLoading extends NotificationsState {}

class NotificationsLoaded extends NotificationsState {
  final List<AppNotification> notifications;
  final int unreadCount;

  const NotificationsLoaded({
    required this.notifications,
    required this.unreadCount,
  });

  // Конструктор копіювання, для зручного оновлення
  NotificationsLoaded copyWith({
    List<AppNotification>? notifications,
    int? unreadCount,
  }) {
    return NotificationsLoaded(
      notifications: notifications ?? this.notifications,
      unreadCount: unreadCount ?? this.unreadCount,
    );
  }

  @override
  List<Object?> get props => [notifications, unreadCount];
}

class NotificationsError extends NotificationsState {
  final String message;
  const NotificationsError(this.message);

  @override
  List<Object?> get props => [message];
}
--------------------------------------------------
=== END OF FILE: lib/features/notifications/presentation/cubit/notifications_state.dart ===


=== FILE: lib/features/notifications/presentation/screens/notifications_screen.dart ===
--------------------------------------------------
// lib/features/notifications/presentation/screens/notifications_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'dart:developer' as developer;

import '../cubit/notifications_cubit.dart';
// Corrected import path (assuming file exists at this location)
import '../widgets/notification_list_item.dart';

class NotificationsScreen extends StatelessWidget {
  const NotificationsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final notificationsCubit = context.read<NotificationsCubit>();

    return Scaffold(
      appBar: AppBar(
        title: const Text('All Notifications'),
        actions: [
          BlocBuilder<NotificationsCubit, NotificationsState>(
            builder: (context, state) {
              if (state is NotificationsLoaded && state.unreadCount > 0) {
                return TextButton(
                  onPressed: () {
                    notificationsCubit.markAllNotificationsAsRead();
                     developer.log('Mark all as read button pressed', name: 'NotificationsScreen');
                  },
                  child: Text(
                    'Mark All Read',
                    style: TextStyle(color: Theme.of(context).appBarTheme.actionsIconTheme?.color ?? Theme.of(context).colorScheme.primary),
                  ),
                );
              }
              return const SizedBox.shrink();
            },
          ),
        ],
      ),
      body: BlocConsumer<NotificationsCubit, NotificationsState>(
        listener: (context, state) {
          if (state is NotificationsError) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Error: ${state.message}'), backgroundColor: Colors.red),
            );
          }
        },
        builder: (context, state) {
          // Fixed prefer_is_not_operator
          if (state is NotificationsLoading && state is! NotificationsLoaded) {
            return const Center(child: CircularProgressIndicator());
          } else if (state is NotificationsLoaded) {
            if (state.notifications.isEmpty) {
              return const Center(
                child: Padding(
                  padding: EdgeInsets.all(20.0),
                  child: Text(
                    'You have no notifications yet.',
                    style: TextStyle(fontSize: 18, color: Colors.grey),
                    textAlign: TextAlign.center,
                  ),
                ),
              );
            }
            return ListView.builder(
              padding: const EdgeInsets.symmetric(vertical: 8.0),
              itemCount: state.notifications.length,
              itemBuilder: (context, index) {
                final notification = state.notifications[index];
                // This assumes NotificationListItem is correctly imported and defined
                return NotificationListItem(notification: notification);
              },
            );
          } else if (state is NotificationsError) {
             return Center(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Icon(Icons.error_outline, color: Colors.red, size: 48),
                    const SizedBox(height: 16),
                    Text('Failed to load notifications: ${state.message}', textAlign: TextAlign.center, style: const TextStyle(color: Colors.red)),
                  ],
                ),
              )
            );
          }
          return const Center(child: Text('Loading...'));
        },
      ),
    );
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/notifications/presentation/screens/notifications_screen.dart ===


=== FILE: lib/features/notifications/presentation/screens/notification_list_item.dart ===
--------------------------------------------------
// lib/features/notifications/presentation/widgets/notification_list_item.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart'; // Для форматування дати

import '../../../../core/domain/entities/app_notification.dart';
import '../cubit/notifications_cubit.dart';

class NotificationListItem extends StatelessWidget {
  final AppNotification notification;

  const NotificationListItem({super.key, required this.notification});

  IconData _getIconForNotificationType(NotificationType type, String? customIconName) {
    if (customIconName != null) {
      final iconMap = {
        'emoji_events': Icons.emoji_events_outlined, // Changed to outlined to match others
        'fitness_center': Icons.fitness_center_outlined, // Changed to outlined
        'notifications': Icons.notifications_active_outlined, // Changed to outlined
        'reminder': Icons.alarm_on_outlined, // Changed to outlined
        'info_outline': Icons.info_outline, // Already outlined
        // ... інші
      };
      return iconMap[customIconName.toLowerCase()] ?? Icons.notifications_active_outlined; // Added toLowerCase for robustness
    }

    switch (type) {
      case NotificationType.achievementUnlocked:
        return Icons.emoji_events_outlined;
      case NotificationType.workoutReminder:
        return Icons.alarm_on_outlined;
      case NotificationType.newFollower:
        return Icons.person_add_alt_1_outlined;
      case NotificationType.routineShared:
        return Icons.share_outlined;
      case NotificationType.systemMessage:
        return Icons.info_outline;
      default:
        return Icons.notifications_active_outlined;
    }
  }

  @override
  Widget build(BuildContext context) {
    final timeAgo = DateFormat.MMMd().add_jm().format(notification.timestamp.toDate());
    final bool isUnread = !notification.isRead;

    return Card(
      elevation: isUnread ? 2.5 : 1.0,
      margin: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(10),
        side: isUnread
            ? BorderSide(color: Theme.of(context).colorScheme.primary.withAlpha((0.7 * 255).round()), width: 1.0) // Fixed withOpacity
            : BorderSide.none,
      ),
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: isUnread
              ? Theme.of(context).colorScheme.primary.withAlpha((0.15 * 255).round()) // Fixed withOpacity
              : Colors.grey.shade200,
          child: Icon(
            _getIconForNotificationType(notification.type, notification.iconName),
            color: isUnread ? Theme.of(context).colorScheme.primary : Colors.grey.shade700,
            size: 24,
          ),
        ),
        title: Text(
          notification.title,
          style: TextStyle(
            fontWeight: isUnread ? FontWeight.bold : FontWeight.normal,
            color: isUnread ? Theme.of(context).colorScheme.onSurface : Colors.grey.shade700,
          ),
          maxLines: 1,
          overflow: TextOverflow.ellipsis,
        ),
        subtitle: Text(
          notification.message,
          style: TextStyle(
            // Fixed withOpacity
            color: isUnread ? Theme.of(context).colorScheme.onSurface.withAlpha((0.8 * 255).round()) : Colors.grey.shade600,
          ),
          maxLines: 2,
          overflow: TextOverflow.ellipsis,
        ),
        trailing: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            Text(
              timeAgo,
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: isUnread ? Theme.of(context).colorScheme.primary : Colors.grey.shade500,
                    fontSize: 11,
                  ),
            ),
            if (isUnread)
              const SizedBox(height: 4),
            if (isUnread)
              Container(
                width: 8,
                height: 8,
                decoration: BoxDecoration(
                  color: Theme.of(context).colorScheme.primary,
                  shape: BoxShape.circle,
                ),
              ),
          ],
        ),
        onTap: () {
          if (isUnread) {
            context.read<NotificationsCubit>().markNotificationAsRead(notification.id);
          }
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Tapped on: ${notification.title} (ID: ${notification.id})')),
          );
        },
      ),
    );
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/notifications/presentation/screens/notification_list_item.dart ===


=== FILE: lib/features/notifications/presentation/widgets/notification_list_item.dart ===
--------------------------------------------------
// lib/features/notifications/presentation/widgets/notification_list_item.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart'; // Для форматування дати

import '../../../../core/domain/entities/app_notification.dart';
import '../cubit/notifications_cubit.dart';

class NotificationListItem extends StatelessWidget {
  final AppNotification notification;

  const NotificationListItem({super.key, required this.notification});

  IconData _getIconForNotificationType(NotificationType type, String? customIconName) {
    if (customIconName != null) {
      final iconMap = {
        'emoji_events': Icons.emoji_events_outlined, // Changed to outlined to match others
        'fitness_center': Icons.fitness_center_outlined, // Changed to outlined
        'notifications': Icons.notifications_active_outlined, // Changed to outlined
        'reminder': Icons.alarm_on_outlined, // Changed to outlined
        'info_outline': Icons.info_outline, // Already outlined
        // ... інші
      };
      return iconMap[customIconName.toLowerCase()] ?? Icons.notifications_active_outlined; // Added toLowerCase for robustness
    }

    switch (type) {
      case NotificationType.achievementUnlocked:
        return Icons.emoji_events_outlined;
      case NotificationType.workoutReminder:
        return Icons.alarm_on_outlined;
      case NotificationType.newFollower:
        return Icons.person_add_alt_1_outlined;
      case NotificationType.routineShared:
        return Icons.share_outlined;
      case NotificationType.systemMessage:
        return Icons.info_outline;
      default:
        return Icons.notifications_active_outlined;
    }
  }

  @override
  Widget build(BuildContext context) {
    final timeAgo = DateFormat.MMMd().add_jm().format(notification.timestamp.toDate());
    final bool isUnread = !notification.isRead;

    return Card(
      elevation: isUnread ? 2.5 : 1.0,
      margin: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(10),
        side: isUnread
            ? BorderSide(color: Theme.of(context).colorScheme.primary.withAlpha((0.7 * 255).round()), width: 1.0) // Fixed withOpacity
            : BorderSide.none,
      ),
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: isUnread
              ? Theme.of(context).colorScheme.primary.withAlpha((0.15 * 255).round()) // Fixed withOpacity
              : Colors.grey.shade200,
          child: Icon(
            _getIconForNotificationType(notification.type, notification.iconName),
            color: isUnread ? Theme.of(context).colorScheme.primary : Colors.grey.shade700,
            size: 24,
          ),
        ),
        title: Text(
          notification.title,
          style: TextStyle(
            fontWeight: isUnread ? FontWeight.bold : FontWeight.normal,
            color: isUnread ? Theme.of(context).colorScheme.onSurface : Colors.grey.shade700,
          ),
          maxLines: 1,
          overflow: TextOverflow.ellipsis,
        ),
        subtitle: Text(
          notification.message,
          style: TextStyle(
            // Fixed withOpacity
            color: isUnread ? Theme.of(context).colorScheme.onSurface.withAlpha((0.8 * 255).round()) : Colors.grey.shade600,
          ),
          maxLines: 2,
          overflow: TextOverflow.ellipsis,
        ),
        trailing: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            Text(
              timeAgo,
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: isUnread ? Theme.of(context).colorScheme.primary : Colors.grey.shade500,
                    fontSize: 11,
                  ),
            ),
            if (isUnread)
              const SizedBox(height: 4),
            if (isUnread)
              Container(
                width: 8,
                height: 8,
                decoration: BoxDecoration(
                  color: Theme.of(context).colorScheme.primary,
                  shape: BoxShape.circle,
                ),
              ),
          ],
        ),
        onTap: () {
          if (isUnread) {
            context.read<NotificationsCubit>().markNotificationAsRead(notification.id);
          }
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Tapped on: ${notification.title} (ID: ${notification.id})')),
          );
        },
      ),
    );
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/notifications/presentation/widgets/notification_list_item.dart ===


=== FILE: lib/features/profile/presentation/cubit/user_profile_cubit.dart ===
--------------------------------------------------
import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:firebase_auth/firebase_auth.dart' as fb_auth;
import '../../../../core/domain/entities/user_profile.dart';
import '../../../../core/domain/repositories/user_profile_repository.dart';
import 'dart:async'; // Для StreamSubscription

part 'user_profile_state.dart';

class UserProfileCubit extends Cubit<UserProfileState> {
  final UserProfileRepository _userProfileRepository;
  final fb_auth.FirebaseAuth _firebaseAuth;
  StreamSubscription<fb_auth.User?>? _authStateSubscription;
  StreamSubscription<UserProfile?>? _userProfileSubscription; // Для оновлень в реальному часі

  UserProfileCubit(this._userProfileRepository, this._firebaseAuth) : super(UserProfileInitial()) {
    // Слухаємо зміни стану автентифікації
    _authStateSubscription = _firebaseAuth.authStateChanges().listen((fb_auth.User? user) {
      if (user != null) {
        fetchUserProfile(user.uid); // Завантажуємо профіль, коли користувач увійшов
        _listenToUserProfileChanges(user.uid); // Починаємо слухати зміни профілю
      } else {
        emit(UserProfileInitial()); // Скидаємо стан, якщо користувач вийшов
        _userProfileSubscription?.cancel(); // Зупиняємо прослуховування
      }
    });
    // Початкове завантаження, якщо користувач вже увійшов при ініціалізації кубіта
    final currentUser = _firebaseAuth.currentUser;
    if (currentUser != null) {
      fetchUserProfile(currentUser.uid);
      _listenToUserProfileChanges(currentUser.uid);
    }
  }

  Future<void> fetchUserProfile(String userId, {bool forceRemote = false}) async {
    // Не завантажувати, якщо вже завантажено і не форсуємо
    if (state is UserProfileLoaded && !forceRemote) return;

    emit(UserProfileLoading());
    try {
      final userProfile = await _userProfileRepository.getUserProfile(userId);
      if (userProfile != null) {
        emit(UserProfileLoaded(userProfile));
      } else {
        // Це може статися, якщо профіль ще не створений або є затримка
        // Можна спробувати створити або показати помилку "профіль не знайдено"
        // Поки що повернемо помилку, але AuthGate має це обробляти
        emit(const UserProfileError("User profile not found. It might be still creating."));
      }
    } catch (e) {
      emit(UserProfileError("Failed to fetch profile: ${e.toString()}"));
    }
  }

  // Метод для оновлення профілю ззовні (наприклад, після ProfileSetup)
  void updateUserProfileState(UserProfile updatedProfile) {
    emit(UserProfileLoaded(updatedProfile));
  }

  // Слухаємо зміни в Firestore для UserProfile (опціонально, для оновлень в реальному часі)
  void _listenToUserProfileChanges(String userId) {
    _userProfileSubscription?.cancel(); // Скасовуємо попередню підписку, якщо є
    _userProfileSubscription = _userProfileRepository.getUserProfileStream(userId).listen( // Припускаємо, що такий метод є
      (userProfile) {
        if (userProfile != null) {
          emit(UserProfileLoaded(userProfile));
        } else {
          // Можливо, користувача видалили або сталася помилка
          emit(const UserProfileError("User profile stream returned null."));
        }
      },
      onError: (error) {
        emit(UserProfileError("Error in profile stream: ${error.toString()}"));
      }
    );
  }


  @override
  Future<void> close() {
    _authStateSubscription?.cancel();
    _userProfileSubscription?.cancel();
    return super.close();
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/profile/presentation/cubit/user_profile_cubit.dart ===


=== FILE: lib/features/profile/presentation/cubit/user_profile_state.dart ===
--------------------------------------------------
part of 'user_profile_cubit.dart';

abstract class UserProfileState extends Equatable {
  const UserProfileState();

  @override
  List<Object?> get props => [];
}

class UserProfileInitial extends UserProfileState {}

class UserProfileLoading extends UserProfileState {}

class UserProfileLoaded extends UserProfileState {
  final UserProfile userProfile;
  const UserProfileLoaded(this.userProfile);

  @override
  List<Object?> get props => [userProfile];
}

class UserProfileError extends UserProfileState {
  final String message;
  const UserProfileError(this.message);

  @override
  List<Object?> get props => [message];
}
--------------------------------------------------
=== END OF FILE: lib/features/profile/presentation/cubit/user_profile_state.dart ===


=== FILE: lib/features/profile_setup/data/repositories/user_profile_repository_impl.dart ===
--------------------------------------------------
// lib/features/profile_setup/data/repositories/user_profile_repository_impl.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../../../core/domain/entities/user_profile.dart';
import '../../../../core/domain/repositories/user_profile_repository.dart';
import 'dart:developer' as developer; // Для логування

class UserProfileRepositoryImpl implements UserProfileRepository {
  final FirebaseFirestore _firestore;

  UserProfileRepositoryImpl({FirebaseFirestore? firestore})
      : _firestore = firestore ?? FirebaseFirestore.instance;

  @override
  Future<UserProfile?> getUserProfile(String userId) async {
    developer.log("Fetching user profile for userId: $userId", name: "UserProfileRepoImpl");
    if (userId.isEmpty) {
      developer.log("UserId is empty, cannot fetch profile.", name: "UserProfileRepoImpl");
      throw ArgumentError("User ID cannot be empty.");
    }
    try {
      final docSnapshot = await _firestore.collection('users').doc(userId).get();
      if (docSnapshot.exists && docSnapshot.data() != null) {
        developer.log("User profile found for userId: $userId", name: "UserProfileRepoImpl");
        return UserProfile.fromFirestore(docSnapshot as DocumentSnapshot<Map<String, dynamic>>);
      } else {
        developer.log("User profile NOT found for userId: $userId", name: "UserProfileRepoImpl");
        return null; // Повертаємо null, якщо документ не існує
      }
    } catch (e, s) {
      developer.log("Error fetching user profile for userId: $userId", error: e, stackTrace: s, name: "UserProfileRepoImpl");
      throw Exception('Failed to fetch user profile: ${e.toString()}');
    }
  }

  @override
  Future<void> updateUserProfile(UserProfile userProfile) async {
    developer.log("Updating user profile for userId: ${userProfile.uid}", name: "UserProfileRepoImpl");
    if (userProfile.uid.isEmpty) {
      developer.log("UserId is empty, cannot update profile.", name: "UserProfileRepoImpl");
      throw ArgumentError("User ID in profile cannot be empty for update.");
    }
    try {
      final dataToUpdate = userProfile.toMap()
        ..['updatedAt'] = FieldValue.serverTimestamp(); // profileSetupComplete вже має бути в userProfile.toMap()

      // uid не є частиною даних документа, а є його ID, тому його не потрібно записувати в поля.
      // createdAt встановлюється один раз при створенні і не має оновлюватися.
      // Ми припускаємо, що toMap() вже правильно обробляє, які поля включати.
      // Якщо ви хочете бути впевненим, що createdAt не перезаписується,
      // ви можете його видалити з dataToUpdate, якщо він там є, але це залежить від реалізації toMap().
      // dataToUpdate.remove('createdAt'); 

      await _firestore.collection('users').doc(userProfile.uid).update(dataToUpdate);
      developer.log("User profile updated successfully for userId: ${userProfile.uid}", name: "UserProfileRepoImpl");
    } catch (e, s) {
      developer.log("Error updating user profile for userId: ${userProfile.uid}", error: e, stackTrace: s, name: "UserProfileRepoImpl");
      throw Exception('Failed to update user profile: ${e.toString()}');
    }
  }

  @override
  Stream<UserProfile?> getUserProfileStream(String userId) {
    developer.log("Setting up user profile stream for userId: $userId", name: "UserProfileRepoImpl");
    if (userId.isEmpty) {
      developer.log("UserId is empty, cannot create profile stream.", name: "UserProfileRepoImpl");
      return Stream.error(ArgumentError("User ID cannot be empty for stream."));
    }
    try {
      return _firestore.collection('users').doc(userId).snapshots().map((snapshot) {
        if (snapshot.exists && snapshot.data() != null) {
          developer.log("Profile stream received data for userId: $userId", name: "UserProfileRepoImpl");
          return UserProfile.fromFirestore(snapshot as DocumentSnapshot<Map<String, dynamic>>);
        }
        developer.log("Profile stream received no data (document might not exist) for userId: $userId", name: "UserProfileRepoImpl");
        return null;
      }).handleError((error, stackTrace) { // Обробка помилок у стрімі
        developer.log("Error in user profile stream for userId: $userId", error: error, stackTrace: stackTrace, name: "UserProfileRepoImpl");
        // Можна або передати помилку далі, або повернути null/попереднє значення, якщо є логіка кешування
        throw Exception('Error in profile stream: ${error.toString()}');
      });
    } catch (e, s) {
      developer.log("Error setting up user profile stream for userId: $userId", error: e, stackTrace: s, name: "UserProfileRepoImpl");
      return Stream.error(Exception('Failed to set up user profile stream: ${e.toString()}'));
    }
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/profile_setup/data/repositories/user_profile_repository_impl.dart ===


=== FILE: lib/features/profile_setup/presentation/cubit/profile_setup_cubit.dart ===
--------------------------------------------------
import 'package:bloc/bloc.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart';
import 'package:firebase_auth/firebase_auth.dart' as fb_auth; // Аліас
import '../../../../core/domain/entities/user_profile.dart';
import '../../../../core/domain/repositories/user_profile_repository.dart';

part 'profile_setup_state.dart';

class ProfileSetupCubit extends Cubit<ProfileSetupState> {
  final UserProfileRepository _userProfileRepository;
  final fb_auth.FirebaseAuth _firebaseAuth;
  UserProfile _currentUserProfile; // Для зберігання поточних змін

  ProfileSetupCubit(this._userProfileRepository, this._firebaseAuth)
      : _currentUserProfile = UserProfile( // Початковий порожній профіль
          uid: _firebaseAuth.currentUser?.uid ?? '',
          email: _firebaseAuth.currentUser?.email,
          displayName: _firebaseAuth.currentUser?.displayName,
          profilePictureUrl: _firebaseAuth.currentUser?.photoURL,
          xp: 0,
          level: 1,
          profileSetupComplete: false,
          createdAt: Timestamp.now(), // Буде перезаписано, якщо документ існує
          updatedAt: Timestamp.now(),
          // інші поля null
        ),
        super(ProfileSetupInitial(UserProfile(
          uid: _firebaseAuth.currentUser?.uid ?? '',
          email: _firebaseAuth.currentUser?.email,
          displayName: _firebaseAuth.currentUser?.displayName,
          profilePictureUrl: _firebaseAuth.currentUser?.photoURL,
          xp: 0,
          level: 1,
          profileSetupComplete: false,
          createdAt: Timestamp.now(),
          updatedAt: Timestamp.now(),
        ))) {
    _loadInitialData(); // Завантажуємо дані, якщо вони є
  }

  UserProfile get currentProfileSnapshot => _currentUserProfile;

  Future<void> _loadInitialData() async {
    final userId = _firebaseAuth.currentUser?.uid;
    if (userId == null) {
      emit(const ProfileSetupFailure("User not logged in."));
      return;
    }
    try {
      final profile = await _userProfileRepository.getUserProfile(userId);
      if (profile != null) {
        _currentUserProfile = profile;
        emit(ProfileSetupDataLoaded(_currentUserProfile));
      } else {
        // Якщо профіль не знайдено (не мало б бути, якщо _createInitialUserProfile спрацював)
        // використовуємо дані з FirebaseAuth
         emit(ProfileSetupDataLoaded(_currentUserProfile));
      }
    } catch (e) {
      emit(ProfileSetupFailure("Failed to load profile data: ${e.toString()}"));
    }
  }


  void updateField({
    String? username,
    String? gender,
    Timestamp? dateOfBirth,
    double? heightCm,
    double? weightKg,
    String? fitnessGoal,
    String? activityLevel,
    String? displayName, // Можливість оновити displayName, якщо потрібно
  }) {
    _currentUserProfile = _currentUserProfile.copyWith(
      username: username != null ? () => username : null,
      gender: gender != null ? () => gender : null,
      dateOfBirth: dateOfBirth != null ? () => dateOfBirth : null,
      heightCm: heightCm != null ? () => heightCm : null,
      weightKg: weightKg != null ? () => weightKg : null,
      fitnessGoal: fitnessGoal != null ? () => fitnessGoal : null,
      activityLevel: activityLevel != null ? () => activityLevel : null,
      displayName: displayName != null ? () => displayName : null,
    );
    // Можна не емітити кожен раз, а тільки при збереженні, або створити ProfileSetupFormUpdated
     emit(ProfileSetupDataLoaded(_currentUserProfile)); // Оновлюємо UI з поточними даними
  }


  Future<void> saveProfile() async {
    final userId = _firebaseAuth.currentUser?.uid;
    if (userId == null) {
      emit(const ProfileSetupFailure("User not logged in."));
      return;
    }
    // Валідація (приклад, можна розширити)
    if (_currentUserProfile.username == null || _currentUserProfile.username!.trim().isEmpty) {
      emit(const ProfileSetupFailure("Username cannot be empty."));
      // Важливо повернути попередній стан, щоб форма не скидалася
      emit(ProfileSetupDataLoaded(_currentUserProfile));
      return;
    }
    // Тут можна додати інші перевірки

    emit(ProfileSetupLoading());
    try {
      // Переконуємося, що UID правильний і profileSetupComplete буде true
      final profileToSave = _currentUserProfile.copyWith(
        uid: userId,
        profileSetupComplete: true,
      );
      await _userProfileRepository.updateUserProfile(profileToSave);
      emit(ProfileSetupSuccess(profileToSave));
    } catch (e) {
      emit(ProfileSetupFailure(e.toString().replaceFirst("Exception: ", "")));
    }
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/profile_setup/presentation/cubit/profile_setup_cubit.dart ===


=== FILE: lib/features/profile_setup/presentation/cubit/profile_setup_state.dart ===
--------------------------------------------------
part of 'profile_setup_cubit.dart';

abstract class ProfileSetupState extends Equatable {
  const ProfileSetupState();

  @override
  List<Object?> get props => [];
}

class ProfileSetupInitial extends ProfileSetupState {
  final UserProfile userProfile; // Початкові дані
  const ProfileSetupInitial(this.userProfile);
  @override
  List<Object?> get props => [userProfile];
}

// Можна додати стан для відображення завантажених даних, якщо потрібно
class ProfileSetupDataLoaded extends ProfileSetupState {
  final UserProfile userProfile;
  const ProfileSetupDataLoaded(this.userProfile);
  @override
  List<Object?> get props => [userProfile];
}

class ProfileSetupLoading extends ProfileSetupState {}

class ProfileSetupSuccess extends ProfileSetupState {
  final UserProfile updatedProfile;
  const ProfileSetupSuccess(this.updatedProfile);
   @override
  List<Object?> get props => [updatedProfile];
}

class ProfileSetupFailure extends ProfileSetupState {
  final String error;
  const ProfileSetupFailure(this.error);
  @override
  List<Object?> get props => [error];
}
--------------------------------------------------
=== END OF FILE: lib/features/profile_setup/presentation/cubit/profile_setup_state.dart ===


=== FILE: lib/features/profile_setup/presentation/screens/profile_setup_screen.dart ===
--------------------------------------------------
// lib/features/profile_setup/presentation/screens/profile_setup_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:firebase_auth/firebase_auth.dart' as fb_auth;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';
import 'dart:developer' as developer;

import '../../../../core/domain/entities/user_profile.dart';
import '../../../../core/domain/repositories/user_profile_repository.dart';
import '../cubit/profile_setup_cubit.dart';
import '../../../../home_page.dart'; // Для навігації
// Імпорт UserProfileCubit, який використовується HomePage, може знадобитися для оновлення стану
import '../../../profile/presentation/cubit/user_profile_cubit.dart' as global_user_profile_cubit;


class ProfileSetupScreen extends StatefulWidget {
  const ProfileSetupScreen({super.key});

  @override
  State<ProfileSetupScreen> createState() => _ProfileSetupScreenState();
}

class _ProfileSetupScreenState extends State<ProfileSetupScreen> {
  final _formKey = GlobalKey<FormState>();

  final _usernameController = TextEditingController();
  final _displayNameController = TextEditingController();
  final _heightController = TextEditingController();
  final _weightController = TextEditingController();

  String? _selectedGender;
  DateTime? _selectedDateOfBirth;
  String? _selectedFitnessGoal;
  String? _selectedActivityLevel;

  late ProfileSetupCubit _profileSetupCubit;

  @override
  void initState() {
    super.initState();
    developer.log("ProfileSetupScreen initState", name: "ProfileSetupScreen");
    _profileSetupCubit = ProfileSetupCubit(
      RepositoryProvider.of<UserProfileRepository>(context),
      RepositoryProvider.of<fb_auth.FirebaseAuth>(context),
    ); // _loadInitialData викликається в конструкторі кубіта
  }

  @override
  void dispose() {
    developer.log("ProfileSetupScreen dispose", name: "ProfileSetupScreen");
    _usernameController.dispose();
    _displayNameController.dispose();
    _heightController.dispose();
    _weightController.dispose();
    _profileSetupCubit.close();
    super.dispose();
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDateOfBirth ?? DateTime.now().subtract(const Duration(days: 365 * 18)),
      firstDate: DateTime(1900),
      lastDate: DateTime.now(),
      helpText: 'Select your date of birth',
      builder: (context, child) { // Опціонально: для стилізації DatePicker
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: Theme.of(context).colorScheme.copyWith(
                  primary: Theme.of(context).colorScheme.primary, // Колір хедера
                  onPrimary: Colors.white, // Колір тексту на хедері
                ),
            textButtonTheme: TextButtonThemeData(
              style: TextButton.styleFrom(
                foregroundColor: Theme.of(context).colorScheme.primary, // Колір кнопок
              ),
            ),
          ),
          child: child!,
        );
      },
    );
    if (picked != null && picked != _selectedDateOfBirth) {
      developer.log("Date selected: $picked", name: "ProfileSetupScreen");
      setState(() {
        _selectedDateOfBirth = picked;
      });
      _profileSetupCubit.updateField(dateOfBirth: Timestamp.fromDate(picked));
    }
  }

  void _handleSaveProfile() {
    developer.log("Save Profile button pressed", name: "ProfileSetupScreen");
    if (_formKey.currentState?.validate() ?? false) {
      developer.log("Form is valid, calling cubit.saveProfile()", name: "ProfileSetupScreen");
      // Переконуємося, що останні дані з контролерів передані (якщо вони не оновлюються onchanged)
      // Це вже робиться через onChanged, але для безпеки можна додати тут:
      _profileSetupCubit.updateField(
        username: _usernameController.text.trim().isNotEmpty ? _usernameController.text.trim() : null,
        displayName: _displayNameController.text.trim().isNotEmpty ? _displayNameController.text.trim() : null,
        heightCm: double.tryParse(_heightController.text),
        weightKg: double.tryParse(_weightController.text),
        // gender, dateOfBirth, fitnessGoal, activityLevel вже оновлюються через setState
      );
      _profileSetupCubit.saveProfile();
    } else {
      developer.log("Form is NOT valid", name: "ProfileSetupScreen");
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please correct the errors in the form.'), backgroundColor: Colors.orangeAccent),
      );
    }
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String label,
    String? Function(String?)? validator,
    TextInputType? keyboardType,
    void Function(String)? onChanged,
    bool isOptional = false,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isOptional ? '$label (Optional)' : '$label*',
        // contentPadding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 16.0), // Зменшено
      ),
      keyboardType: keyboardType,
      validator: validator,
      onChanged: onChanged,
      style: Theme.of(context).textTheme.bodyLarge,
    );
  }

  Widget _buildDropdownField<T>({
    required T? value,
    required String label,
    required List<DropdownMenuItem<T>> items,
    required void Function(T?)? onChanged,
    String? Function(T?)? validator,
    bool isOptional = false,

  }) {
    return DropdownButtonFormField<T>(
      value: value,
      decoration: InputDecoration(
        labelText: isOptional ? '$label (Optional)' : '$label*',
        // contentPadding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 10.0), // Зменшено
      ),
      items: items,
      onChanged: onChanged,
      validator: validator,
      isExpanded: true,
      style: Theme.of(context).textTheme.bodyLarge,
    );
  }


  @override
  Widget build(BuildContext context) {
    return BlocProvider.value(
      value: _profileSetupCubit,
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Complete Your Profile'),
          centerTitle: true,
        ),
        body: BlocConsumer<ProfileSetupCubit, ProfileSetupState>(
          listener: (context, state) {
            developer.log("ProfileSetupCubit state changed: $state", name: "ProfileSetupScreen.Listener");
            if (state is ProfileSetupSuccess) {
              developer.log("ProfileSetupSuccess: Navigating to HomePage", name: "ProfileSetupScreen.Listener");
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Profile saved successfully!'), backgroundColor: Colors.green),
              );
              // Оновлюємо глобальний UserProfileCubit, якщо він існує
              try {
                context.read<global_user_profile_cubit.UserProfileCubit>().updateUserProfileState(state.updatedProfile);
                 developer.log("Global UserProfileCubit updated", name: "ProfileSetupScreen.Listener");
              } catch (e) {
                developer.log("Could not find or update global UserProfileCubit: $e", name: "ProfileSetupScreen.Listener");
              }

              Navigator.of(context).pushAndRemoveUntil(
                MaterialPageRoute(builder: (context) => const HomePage()),
                (Route<dynamic> route) => false,
              );
            } else if (state is ProfileSetupFailure) {
              developer.log("ProfileSetupFailure: ${state.error}", name: "ProfileSetupScreen.Listener");
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('Error: ${state.error}'), backgroundColor: Colors.red),
              );
            }
          },
          // Заповнюємо поля з ProfileSetupDataLoaded або ProfileSetupInitial
          buildWhen: (previous, current) => current is ProfileSetupInitial || current is ProfileSetupDataLoaded || current is ProfileSetupLoading || current is ProfileSetupFailure,
          builder: (context, state) {
            developer.log("ProfileSetupScreen rebuilding UI with state: $state", name: "ProfileSetupScreen.Builder");
            UserProfile currentProfileUI;

            if (state is ProfileSetupInitial) {
              currentProfileUI = state.userProfile;
            } else if (state is ProfileSetupDataLoaded) {
              currentProfileUI = state.userProfile;
            } else if (state is ProfileSetupLoading && _profileSetupCubit.currentProfileSnapshot.uid.isNotEmpty) {
              // Якщо завантаження, але є попередні дані, використовуємо їх
              currentProfileUI = _profileSetupCubit.currentProfileSnapshot;
            }
             else {
              // Початковий стан або стан помилки без даних профілю (малоймовірно, але для безпеки)
              currentProfileUI = UserProfile(
                uid: RepositoryProvider.of<fb_auth.FirebaseAuth>(context).currentUser?.uid ?? '',
                email: RepositoryProvider.of<fb_auth.FirebaseAuth>(context).currentUser?.email,
                displayName: RepositoryProvider.of<fb_auth.FirebaseAuth>(context).currentUser?.displayName,
                xp: 0, level: 1, profileSetupComplete: false,
                createdAt: Timestamp.now(), updatedAt: Timestamp.now(),
              );
            }

            // Оновлюємо контролери та локальні змінні, якщо вони порожні,
            // а в currentProfileUI є дані (це відбувається один раз при завантаженні даних)
            // або якщо state є ProfileSetupDataLoaded.
             WidgetsBinding.instance.addPostFrameCallback((_) {
              if (mounted) { // Перевіряємо, чи віджет все ще в дереві
                if (_usernameController.text.isEmpty && currentProfileUI.username != null) {
                  _usernameController.text = currentProfileUI.username!;
                }
                if (_displayNameController.text.isEmpty && (currentProfileUI.displayName != null || currentProfileUI.email != null)) {
                  _displayNameController.text = currentProfileUI.displayName ?? currentProfileUI.email?.split('@').first ?? '';
                }
                 if (_heightController.text.isEmpty && currentProfileUI.heightCm != null) {
                  _heightController.text = currentProfileUI.heightCm!.toStringAsFixed(0); // Без десяткових для зросту
                }
                if (_weightController.text.isEmpty && currentProfileUI.weightKg != null) {
                  _weightController.text = currentProfileUI.weightKg!.toStringAsFixed(1);
                }
                // Для Dropdown та DatePicker, setState викликається при зміні
                // Але якщо вони null, а в currentProfileUI є значення, оновлюємо
                if (_selectedGender == null && currentProfileUI.gender != null) {
                  setState(() => _selectedGender = currentProfileUI.gender);
                }
                if (_selectedDateOfBirth == null && currentProfileUI.dateOfBirth != null) {
                   setState(() => _selectedDateOfBirth = currentProfileUI.dateOfBirth!.toDate());
                }
                if (_selectedFitnessGoal == null && currentProfileUI.fitnessGoal != null) {
                   setState(() => _selectedFitnessGoal = currentProfileUI.fitnessGoal);
                }
                if (_selectedActivityLevel == null && currentProfileUI.activityLevel != null) {
                   setState(() => _selectedActivityLevel = currentProfileUI.activityLevel);
                }
              }
            });


            if (state is ProfileSetupLoading && currentProfileUI.uid.isEmpty) { // Тільки якщо немає жодних даних для відображення
              return const Center(child: CircularProgressIndicator());
            }

            return SingleChildScrollView(
              padding: const EdgeInsets.all(20.0),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: <Widget>[
                    _buildTextField(
                      controller: _usernameController,
                      label: 'Username',
                      validator: (value) => (value == null || value.trim().isEmpty) ? 'Username is required' : null,
                      onChanged: (value) => _profileSetupCubit.updateField(username: value.trim()),
                    ),
                    const SizedBox(height: 16),
                    _buildTextField(
                      controller: _displayNameController,
                      label: 'Display Name',
                      isOptional: true,
                      onChanged: (value) => _profileSetupCubit.updateField(displayName: value.trim().isNotEmpty ? value.trim() : null),
                    ),
                    const SizedBox(height: 16),
                    _buildDropdownField<String>(
                      value: _selectedGender,
                      label: 'Gender',
                      isOptional: true,
                      items: ['Male', 'Female', 'Other', 'Prefer not to say']
                          .map((label) => DropdownMenuItem(value: label.toLowerCase().replaceAll(' ', '_'), child: Text(label)))
                          .toList(),
                      onChanged: (value) {
                        setState(() => _selectedGender = value);
                        _profileSetupCubit.updateField(gender: value);
                      },
                    ),
                    const SizedBox(height: 16),
                    ListTile(
                      contentPadding: const EdgeInsets.symmetric(horizontal: 12.0, vertical: 4.0),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12.0),
                        side: BorderSide(color: Theme.of(context).inputDecorationTheme.enabledBorder?.borderSide.color ?? Colors.grey.shade400, width: 1.0),
                      ),
                      tileColor: Theme.of(context).inputDecorationTheme.fillColor,
                      title: Text(
                        _selectedDateOfBirth == null
                            ? 'Date of Birth (Optional)'
                            : DateFormat('dd MMMM yyyy').format(_selectedDateOfBirth!),
                        style: _selectedDateOfBirth == null
                            ? Theme.of(context).inputDecorationTheme.hintStyle
                            : Theme.of(context).textTheme.bodyLarge,
                      ),
                      trailing: Icon(Icons.calendar_today, color: Theme.of(context).primaryColor),
                      onTap: () => _selectDate(context),
                    ),
                    const SizedBox(height: 16),
                     _buildTextField(
                      controller: _heightController,
                      label: 'Height (cm)',
                      isOptional: true,
                      keyboardType: const TextInputType.numberWithOptions(decimal: true),
                      validator: (value) {
                        if (value == null || value.isEmpty) return null; // Опціонально
                        final n = double.tryParse(value);
                        if (n == null || n <= 0 || n > 300) return 'Invalid height';
                        return null;
                      },
                      onChanged: (value) => _profileSetupCubit.updateField(heightCm: double.tryParse(value)),
                    ),
                    const SizedBox(height: 16),
                    _buildTextField(
                      controller: _weightController,
                      label: 'Weight (kg)',
                      isOptional: true,
                      keyboardType: const TextInputType.numberWithOptions(decimal: true),
                       validator: (value) {
                        if (value == null || value.isEmpty) return null; // Опціонально
                        final n = double.tryParse(value);
                        if (n == null || n <= 0 || n > 500) return 'Invalid weight';
                        return null;
                      },
                      onChanged: (value) => _profileSetupCubit.updateField(weightKg: double.tryParse(value)),
                    ),
                    const SizedBox(height: 16),
                    _buildDropdownField<String>(
                      value: _selectedFitnessGoal,
                      label: 'Primary Fitness Goal',
                      isOptional: true,
                      items: ['Lose Weight', 'Gain Muscle', 'Improve Stamina', 'General Fitness', 'Improve Strength']
                          .map((label) => DropdownMenuItem(value: label.toLowerCase().replaceAll(' ', '_'), child: Text(label)))
                          .toList(),
                      onChanged: (value) {
                        setState(() => _selectedFitnessGoal = value);
                         _profileSetupCubit.updateField(fitnessGoal: value);
                      },
                    ),
                    const SizedBox(height: 16),
                     _buildDropdownField<String>(
                      value: _selectedActivityLevel,
                      label: 'Activity Level',
                      isOptional: true,
                      items: ['Sedentary (little or no exercise)', 'Light (exercise 1-3 days/week)', 'Moderate (exercise 3-5 days/week)', 'Active (exercise 6-7 days/week)', 'Very Active (hard exercise or physical job)']
                          .map((label) {
                            final value = label.split(' ').first.toLowerCase();
                            return DropdownMenuItem(value: value, child: Text(label, overflow: TextOverflow.ellipsis));
                          })
                          .toList(),
                       onChanged: (value) {
                        setState(() => _selectedActivityLevel = value);
                         _profileSetupCubit.updateField(activityLevel: value);
                      },
                    ),
                    const SizedBox(height: 30),
                    ElevatedButton(
                      onPressed: (state is ProfileSetupLoading) ? null : _handleSaveProfile,
                      child: (state is ProfileSetupLoading)
                          ? const SizedBox(height: 20, width: 20, child: CircularProgressIndicator(color: Colors.white, strokeWidth: 3,))
                          : const Text('Save and Continue'),
                    ),
                     const SizedBox(height: 20),
                  ],
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/profile_setup/presentation/screens/profile_setup_screen.dart ===


=== FILE: lib/features/routines/data/repositories/routine_repository_impl.dart ===
--------------------------------------------------
// lib/features/routines/data/repositories/routine_repository_impl.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../../../../core/domain/entities/routine.dart';
import '../../../../core/domain/repositories/routine_repository.dart';
import 'dart:developer' as developer; // Для логування

class RoutineRepositoryImpl implements RoutineRepository {
  final FirebaseFirestore _firestore;
  final FirebaseAuth _firebaseAuth; // ЗАЛИШАЄМО, бо використовується для _currentUserId

  RoutineRepositoryImpl({FirebaseFirestore? firestore, FirebaseAuth? firebaseAuth})
      : _firestore = firestore ?? FirebaseFirestore.instance,
        _firebaseAuth = firebaseAuth ?? FirebaseAuth.instance;

  String? get _currentUserId => _firebaseAuth.currentUser?.uid; // Використовується

  @override
  Future<void> createRoutine(UserRoutine routine) async {
    final currentUserId = _currentUserId; // Зберігаємо в локальну змінну
    if (currentUserId == null) throw Exception('User not logged in');
    try {
      final docRef = _firestore.collection('userRoutines').doc();
      final routineData = routine.copyWith(
        id: docRef.id,
        userId: currentUserId, // Гарантуємо правильний userId
        createdAt: Timestamp.now(), 
        updatedAt: Timestamp.now()
      ).toMap()
        ..['createdAt'] = FieldValue.serverTimestamp()
        ..['updatedAt'] = FieldValue.serverTimestamp();
      await docRef.set(routineData);
    } catch (e) {
      developer.log("Error creating routine: $e", name: "RoutineRepositoryImpl");
      throw Exception('Failed to create routine.');
    }
  }

  @override
  Future<List<UserRoutine>> getUserRoutines(String userId) async {
    if (userId.isEmpty) throw Exception('User ID cannot be empty');
    try {
      final snapshot = await _firestore
          .collection('userRoutines')
          .where('userId', isEqualTo: userId)
          .orderBy('updatedAt', descending: true)
          .get();
      return snapshot.docs
          .map((doc) => UserRoutine.fromFirestore(doc as DocumentSnapshot<Map<String, dynamic>>))
          .toList();
    } catch (e) {
      developer.log("Error fetching user routines for $userId: $e", name: "RoutineRepositoryImpl");
      throw Exception('Failed to fetch user routines.');
    }
  }

  @override
  Future<void> updateRoutine(UserRoutine routine) async {
    final currentUserId = _currentUserId;
    if (currentUserId == null) throw Exception('User not logged in');
    if (routine.userId != currentUserId) throw Exception('Cannot update routine of another user');
    try {
      final routineData = routine.copyWith(updatedAt: Timestamp.now()).toMap()
        ..['updatedAt'] = FieldValue.serverTimestamp();
      await _firestore.collection('userRoutines').doc(routine.id).update(routineData);
    } catch (e) {
      developer.log("Error updating routine ${routine.id}: $e", name: "RoutineRepositoryImpl");
      throw Exception('Failed to update routine.');
    }
  }

  @override
  Future<void> deleteRoutine(String routineId) async {
    final currentUserId = _currentUserId;
    if (currentUserId == null) throw Exception('User not logged in');
    try {
      final routineDoc = await _firestore.collection('userRoutines').doc(routineId).get();
      if (!routineDoc.exists || routineDoc.data()?['userId'] != currentUserId) {
        developer.log('Attempt to delete routine $routineId failed: Not found or permission denied.', name: "RoutineRepositoryImpl");
        throw Exception('Routine not found or permission denied to delete.');
      }
      await _firestore.collection('userRoutines').doc(routineId).delete();
    } catch (e) {
      developer.log("Error deleting routine $routineId: $e", name: "RoutineRepositoryImpl");
      // Не перезагортаємо у загальний Exception, якщо це вже специфічний
      if (e is! Exception || !e.toString().contains('Routine not found')) {
          throw Exception('Failed to delete routine.');
      }
      rethrow; // Перекидаємо оригінальну помилку, якщо це "Routine not found..."
    }
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/routines/data/repositories/routine_repository_impl.dart ===


=== FILE: lib/features/routines/presentation/cubit/manage_routine_cubit.dart ===
--------------------------------------------------
// lib/features/routines/presentation/cubit/manage_routine_cubit.dart
import 'package:bloc/bloc.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../../../../core/domain/entities/routine.dart';
import '../../../../core/domain/repositories/routine_repository.dart';

part 'manage_routine_state.dart';

class ManageRoutineCubit extends Cubit<ManageRoutineState> {
  final RoutineRepository _routineRepository;
  final FirebaseAuth _firebaseAuth;
  UserRoutine _currentRoutine; // Внутрішній стан рутини, що редагується
  final bool _isEditing;

  ManageRoutineCubit(
    this._routineRepository,
    this._firebaseAuth, {
    UserRoutine? initialRoutine,
  })  : _currentRoutine = initialRoutine ??
            UserRoutine(
              // Значення за замовчуванням для нової рутини
              id: '', // Буде встановлено репозиторієм
              userId: _firebaseAuth.currentUser?.uid ?? '',
              name: '',
              exercises: [],
              scheduledDays: [],
              isPublic: false,
              createdAt: Timestamp.now(), // Попереднє значення
              updatedAt: Timestamp.now(), // Попереднє значення
            ),
        _isEditing = initialRoutine != null,
        super(ManageRoutineInitial(
            routine: initialRoutine ??
                UserRoutine(
                  id: '',
                  userId: _firebaseAuth.currentUser?.uid ?? '',
                  name: '',
                  exercises: [],
                  scheduledDays: [],
                  isPublic: false,
                  createdAt: Timestamp.now(),
                  updatedAt: Timestamp.now(),
                ),
            isEditing: initialRoutine != null));

  UserRoutine get currentRoutineSnapshot => _currentRoutine;
  bool get isEditingMode => _isEditing;

  void updateRoutineName(String name) {
    _currentRoutine = _currentRoutine.copyWith(name: name);
    emit(ManageRoutineExercisesUpdated(_currentRoutine)); // Щоб UI оновився
  }

  void updateRoutineDescription(String description) {
    _currentRoutine = _currentRoutine.copyWith(description: description);
     emit(ManageRoutineExercisesUpdated(_currentRoutine));
  }

  void updateScheduledDays(List<String> days) {
    _currentRoutine = _currentRoutine.copyWith(scheduledDays: days);
     emit(ManageRoutineExercisesUpdated(_currentRoutine));
  }

  void addExerciseToRoutine(RoutineExercise exercise) {
    final updatedExercises = List<RoutineExercise>.from(_currentRoutine.exercises)..add(exercise);
    _currentRoutine = _currentRoutine.copyWith(exercises: updatedExercises);
    emit(ManageRoutineExercisesUpdated(_currentRoutine));
  }

  void updateExerciseInRoutine(int index, RoutineExercise exercise) {
    if (index < 0 || index >= _currentRoutine.exercises.length) return;
    final updatedExercises = List<RoutineExercise>.from(_currentRoutine.exercises);
    updatedExercises[index] = exercise;
    _currentRoutine = _currentRoutine.copyWith(exercises: updatedExercises);
    emit(ManageRoutineExercisesUpdated(_currentRoutine));
  }

  void removeExerciseFromRoutine(int index) {
    if (index < 0 || index >= _currentRoutine.exercises.length) return;
    final updatedExercises = List<RoutineExercise>.from(_currentRoutine.exercises)..removeAt(index);
    _currentRoutine = _currentRoutine.copyWith(exercises: updatedExercises);
    emit(ManageRoutineExercisesUpdated(_currentRoutine));
  }

  Future<void> saveRoutine() async {
    final userId = _firebaseAuth.currentUser?.uid;
    if (userId == null) {
      emit(const ManageRoutineFailure("User not logged in."));
      return;
    }
    if (_currentRoutine.name.trim().isEmpty) {
      emit(const ManageRoutineFailure("Routine name cannot be empty."));
      return;
    }
    if (_currentRoutine.exercises.isEmpty) {
      emit(const ManageRoutineFailure("Routine must have at least one exercise."));
      return;
    }

    emit(const ManageRoutineLoading(loadingMessage: "Saving routine..."));
    
    // Оновлюємо userId та timestamps перед збереженням
    _currentRoutine = _currentRoutine.copyWith(
        userId: userId, 
        // createdAt тут не оновлюємо, якщо isEditing, timestamp оновлюється в репо
        updatedAt: Timestamp.now(), // оновлюємо локально для консистентності
    );

    try {
      if (_isEditing) {
        await _routineRepository.updateRoutine(_currentRoutine);
        emit(ManageRoutineSuccess("Routine updated successfully!", _currentRoutine));
      } else {
        // Для нової рутини ID буде присвоєно в репозиторії,
        // але ми можемо створити тимчасовий локальний ID або чекати на повернення з репозиторію.
        // Краще, щоб репозиторій повертав створений об'єкт або його ID.
        // Наразі, припустимо, що репозиторій обробляє ID.
        // Або, якщо `createRoutine` повертає `UserRoutine`:
        // final savedRoutine = await _routineRepository.createRoutine(_currentRoutine);
        // emit(ManageRoutineSuccess("Routine created successfully!", savedRoutine));
        
        // Поточна реалізація createRoutine не повертає об'єкт, тому ми просто
        // передаємо _currentRoutine, припускаючи, що ID буде встановлено в Firestore
        // і для наступного завантаження воно буде коректним.
        await _routineRepository.createRoutine(_currentRoutine);
        emit(ManageRoutineSuccess("Routine created successfully!", _currentRoutine));
      }
    } catch (e) {
      emit(ManageRoutineFailure(e.toString().replaceFirst("Exception: ", "")));
    }
  }

   Future<void> deleteRoutine() async {
    if (!_isEditing || _currentRoutine.id.isEmpty) {
      emit(const ManageRoutineFailure("Cannot delete a new or unsaved routine."));
      return;
    }
     final userId = _firebaseAuth.currentUser?.uid;
    if (userId == null) {
      emit(const ManageRoutineFailure("User not logged in."));
      return;
    }

    emit(const ManageRoutineLoading(loadingMessage: "Deleting routine..."));
    try {
      await _routineRepository.deleteRoutine(_currentRoutine.id);
      emit(ManageRoutineSuccess("Routine deleted successfully!", _currentRoutine)); // Повертаємо видалену рутину для обробки в UI
    } catch (e) {
      emit(ManageRoutineFailure(e.toString().replaceFirst("Exception: ", "")));
    }
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/routines/presentation/cubit/manage_routine_cubit.dart ===


=== FILE: lib/features/routines/presentation/cubit/manage_routine_state.dart ===
--------------------------------------------------
// lib/features/routines/presentation/cubit/manage_routine_state.dart
part of 'manage_routine_cubit.dart';

abstract class ManageRoutineState extends Equatable {
  const ManageRoutineState();

  @override
  List<Object?> get props => [];
}

class ManageRoutineInitial extends ManageRoutineState {
  final UserRoutine routine; // Поточний стан рутини, що редагується/створюється
  final bool isEditing;

  const ManageRoutineInitial({required this.routine, this.isEditing = false});

  @override
  List<Object?> get props => [routine, isEditing];
}

class ManageRoutineLoading extends ManageRoutineState {
    final String? loadingMessage;
    const ManageRoutineLoading({this.loadingMessage});

    @override
    List<Object?> get props => [loadingMessage];
}

class ManageRoutineSuccess extends ManageRoutineState {
  final String message;
  final UserRoutine savedRoutine; // Повертаємо збережену рутину

  const ManageRoutineSuccess(this.message, this.savedRoutine);

  @override
  List<Object?> get props => [message, savedRoutine];
}

class ManageRoutineFailure extends ManageRoutineState {
  final String error;

  const ManageRoutineFailure(this.error);

  @override
  List<Object?> get props => [error];
}

// Додатковий стан для оновлення UI при зміні вправ у рутині
class ManageRoutineExercisesUpdated extends ManageRoutineState {
  final UserRoutine updatedRoutine;

  const ManageRoutineExercisesUpdated(this.updatedRoutine);

   @override
  List<Object?> get props => [updatedRoutine];
}
--------------------------------------------------
=== END OF FILE: lib/features/routines/presentation/cubit/manage_routine_state.dart ===


=== FILE: lib/features/routines/presentation/cubit/user_routines_cubit.dart ===
--------------------------------------------------
// lib/features/routines/presentation/cubit/user_routines_cubit.dart
import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:firebase_auth/firebase_auth.dart'; // Для отримання UID
import '../../../../core/domain/entities/routine.dart';
import '../../../../core/domain/repositories/routine_repository.dart';

part 'user_routines_state.dart';

class UserRoutinesCubit extends Cubit<UserRoutinesState> {
  final RoutineRepository _routineRepository;
  final FirebaseAuth _firebaseAuth; // Для отримання UID

  UserRoutinesCubit(this._routineRepository, this._firebaseAuth) : super(UserRoutinesInitial());

  Future<void> fetchUserRoutines() async {
    final userId = _firebaseAuth.currentUser?.uid;
    if (userId == null) {
      emit(const UserRoutinesError("User not logged in. Cannot fetch routines."));
      return;
    }

    emit(UserRoutinesLoading());
    try {
      final routines = await _routineRepository.getUserRoutines(userId);
      emit(UserRoutinesLoaded(routines));
    } catch (e) {
      emit(UserRoutinesError(e.toString().replaceFirst("Exception: ", "")));
    }
  }

  // Метод для оновлення списку після видалення рутини
  void routineDeleted(String routineId) {
    if (state is UserRoutinesLoaded) {
      final currentState = state as UserRoutinesLoaded;
      final updatedRoutines = currentState.routines.where((r) => r.id != routineId).toList();
      emit(UserRoutinesLoaded(updatedRoutines));
    }
  }
   // Метод для оновлення списку після додавання/редагування рутини
  void routineAddedOrUpdated(UserRoutine routine) {
    if (state is UserRoutinesLoaded) {
      final currentState = state as UserRoutinesLoaded;
      List<UserRoutine> updatedRoutines = List.from(currentState.routines);
      final index = updatedRoutines.indexWhere((r) => r.id == routine.id);
      if (index != -1) { // Оновлення існуючої
        updatedRoutines[index] = routine;
      } else { // Додавання нової
        updatedRoutines.insert(0, routine); // Додаємо на початок для кращого UX
      }
      emit(UserRoutinesLoaded(updatedRoutines));
    } else {
      // Якщо список ще не завантажений, просто завантажуємо його знову
      fetchUserRoutines();
    }
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/routines/presentation/cubit/user_routines_cubit.dart ===


=== FILE: lib/features/routines/presentation/cubit/user_routines_state.dart ===
--------------------------------------------------
// lib/features/routines/presentation/cubit/user_routines_state.dart
part of 'user_routines_cubit.dart';

abstract class UserRoutinesState extends Equatable {
  const UserRoutinesState();

  @override
  List<Object> get props => [];
}

class UserRoutinesInitial extends UserRoutinesState {}

class UserRoutinesLoading extends UserRoutinesState {}

class UserRoutinesLoaded extends UserRoutinesState {
  final List<UserRoutine> routines;

  const UserRoutinesLoaded(this.routines);

  @override
  List<Object> get props => [routines];
}

class UserRoutinesError extends UserRoutinesState {
  final String message;

  const UserRoutinesError(this.message);

  @override
  List<Object> get props => [message];
}
--------------------------------------------------
=== END OF FILE: lib/features/routines/presentation/cubit/user_routines_state.dart ===


=== FILE: lib/features/routines/presentation/screens/create_edit_routine_screen.dart ===
--------------------------------------------------
// lib/features/routines/presentation/screens/create_edit_routine_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:firebase_auth/firebase_auth.dart'; // для доступу до репо та auth
import '../../../../core/domain/entities/routine.dart';
import '../../../../core/domain/repositories/routine_repository.dart'; // для доступу до репо
import '../cubit/manage_routine_cubit.dart';
import '../cubit/user_routines_cubit.dart'; // для оновлення списку рутин
import '../widgets/add_exercise_to_routine_dialog.dart'; // Діалог, який ми щойно створили

class CreateEditRoutineScreen extends StatefulWidget {
  final UserRoutine? routineToEdit;

  const CreateEditRoutineScreen({super.key, this.routineToEdit});

  @override
  State<CreateEditRoutineScreen> createState() => _CreateEditRoutineScreenState();
}

class _CreateEditRoutineScreenState extends State<CreateEditRoutineScreen> {
  late final ManageRoutineCubit _manageRoutineCubit;
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _descriptionController = TextEditingController();
  List<String> _selectedDays = []; // Для вибору днів тижня

  final List<String> _availableDays = [
    'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'
  ];

  @override
  void initState() {
    super.initState();
    _manageRoutineCubit = ManageRoutineCubit(
      RepositoryProvider.of<RoutineRepository>(context),
      FirebaseAuth.instance, // Передаємо FirebaseAuth
      initialRoutine: widget.routineToEdit,
    );

    if (widget.routineToEdit != null) {
      _nameController.text = widget.routineToEdit!.name;
      _descriptionController.text = widget.routineToEdit!.description ?? '';
      _selectedDays = List<String>.from(widget.routineToEdit!.scheduledDays);
    }

    _nameController.addListener(() {
      _manageRoutineCubit.updateRoutineName(_nameController.text);
    });
    _descriptionController.addListener(() {
      _manageRoutineCubit.updateRoutineDescription(_descriptionController.text);
    });
  }

  @override
  void dispose() {
    _nameController.dispose();
    _descriptionController.dispose();
    _manageRoutineCubit.close();
    super.dispose();
  }

  void _saveRoutine() {
    if (_formKey.currentState!.validate()) {
      // Переконуємось, що останні зміни з контролерів передані в кубіт
      _manageRoutineCubit.updateRoutineName(_nameController.text);
      _manageRoutineCubit.updateRoutineDescription(_descriptionController.text);
      _manageRoutineCubit.updateScheduledDays(_selectedDays);
      
      _manageRoutineCubit.saveRoutine();
    }
  }

  Future<void> _deleteRoutine() async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (ctx) => AlertDialog(
        title: const Text('Confirm Delete'),
        content: Text('Are you sure you want to delete "${_nameController.text}"?'),
        actions: [
          TextButton(onPressed: () => Navigator.of(ctx).pop(false), child: const Text('Cancel')),
          TextButton(
            onPressed: () => Navigator.of(ctx).pop(true),
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('Delete'),
          ),
        ],
      ),
    );
    if (confirmed == true) {
      _manageRoutineCubit.deleteRoutine();
    }
  }


  Widget _buildExerciseItem(BuildContext context, RoutineExercise exercise, int index) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 4),
      child: ListTile(
        title: Text(exercise.exerciseNameSnapshot),
        subtitle: Text('${exercise.numberOfSets} sets'),
        trailing: IconButton(
          icon: const Icon(Icons.delete_outline, color: Colors.redAccent),
          onPressed: () {
            _manageRoutineCubit.removeExerciseFromRoutine(index);
          },
        ),
        onTap: () async {
           // TODO: Редагування вправи в рутині (наприклад, зміна кількості підходів)
          // Можна відкрити діалог схожий на той, що використовується для додавання,
          // але з попередньо заповненими даними.
          final TextEditingController setsCtrl = TextEditingController(text: exercise.numberOfSets.toString());
          final TextEditingController notesCtrl = TextEditingController(text: exercise.notes ?? '');
          final formKey = GlobalKey<FormState>();

          final RoutineExercise? updatedExerciseDetails = await showDialog<RoutineExercise>(
            context: context,
            builder: (dialogCtx) => AlertDialog(
              title: Text('Edit "${exercise.exerciseNameSnapshot}"'),
              content: Form(
                key: formKey,
                child: Column(mainAxisSize: MainAxisSize.min, children: [
                  TextFormField(
                    controller: setsCtrl,
                    decoration: const InputDecoration(labelText: 'Number of Sets'),
                    keyboardType: TextInputType.number,
                    validator: (v) => (v == null || v.isEmpty || int.tryParse(v) == null || int.parse(v) <= 0) ? 'Invalid sets' : null,
                  ),
                  const SizedBox(height: 8),
                  TextFormField(controller: notesCtrl, decoration: const InputDecoration(labelText: 'Notes (optional)')),
                ]),
              ),
              actions: [
                TextButton(onPressed: () => Navigator.pop(dialogCtx), child: const Text('Cancel')),
                ElevatedButton(
                  onPressed: () {
                    if (formKey.currentState!.validate()) {
                       Navigator.pop(dialogCtx, RoutineExercise(
                        predefinedExerciseId: exercise.predefinedExerciseId,
                        exerciseNameSnapshot: exercise.exerciseNameSnapshot,
                        numberOfSets: int.parse(setsCtrl.text),
                        notes: notesCtrl.text.trim().isNotEmpty ? notesCtrl.text.trim() : null,
                      ));
                    }
                  },
                  child: const Text('Update'),
                ),
              ],
            ),
          );
          if (updatedExerciseDetails != null) {
            _manageRoutineCubit.updateExerciseInRoutine(index, updatedExerciseDetails);
          }
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider.value(
      value: _manageRoutineCubit,
      child: Scaffold(
        appBar: AppBar(
          title: Text(widget.routineToEdit == null ? 'Create Routine' : 'Edit Routine'),
          actions: [
            if (widget.routineToEdit != null)
              IconButton(
                icon: const Icon(Icons.delete_forever, color: Colors.red),
                onPressed: _deleteRoutine,
                tooltip: 'Delete Routine',
              ),
            IconButton(
              icon: const Icon(Icons.save),
              onPressed: _saveRoutine,
              tooltip: 'Save Routine',
            ),
          ],
        ),
        body: BlocConsumer<ManageRoutineCubit, ManageRoutineState>(
          listener: (context, state) {
            if (state is ManageRoutineSuccess) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text(state.message), backgroundColor: Colors.green),
              );
              // Оновлюємо список рутин на попередньому екрані
              context.read<UserRoutinesCubit>().routineAddedOrUpdated(state.savedRoutine);

              Navigator.of(context).pop(); // Повертаємось назад після успіху
            } else if (state is ManageRoutineFailure) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('Error: ${state.error}'), backgroundColor: Colors.red),
              );
            }
          },
          builder: (context, state) {
            UserRoutine currentDisplayRoutine = _manageRoutineCubit.currentRoutineSnapshot;
            if (state is ManageRoutineExercisesUpdated) { // Оновлюємо відображення, якщо вправи змінились
              currentDisplayRoutine = state.updatedRoutine;
            } else if (state is ManageRoutineInitial) {
              currentDisplayRoutine = state.routine;
            }


            if (state is ManageRoutineLoading) {
              return Center(child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const CircularProgressIndicator(),
                  if(state.loadingMessage != null) ...[
                    const SizedBox(height: 16),
                    Text(state.loadingMessage!),
                  ]
                ],
              ));
            }

            return SingleChildScrollView(
              padding: const EdgeInsets.all(16.0),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: <Widget>[
                    TextFormField(
                      controller: _nameController,
                      decoration: const InputDecoration(labelText: 'Routine Name'),
                      validator: (value) => value == null || value.trim().isEmpty ? 'Name cannot be empty' : null,
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _descriptionController,
                      decoration: const InputDecoration(labelText: 'Description (optional)'),
                      maxLines: 3,
                    ),
                    const SizedBox(height: 24),
                    Text('Scheduled Days:', style: Theme.of(context).textTheme.titleMedium),
                    Wrap(
                      spacing: 8.0,
                      children: _availableDays.map((day) {
                        final isSelected = _selectedDays.contains(day);
                        return FilterChip(
                          label: Text(day),
                          selected: isSelected,
                          onSelected: (bool selected) {
                            setState(() {
                              if (selected) {
                                _selectedDays.add(day);
                              } else {
                                _selectedDays.remove(day);
                              }
                              // Оновлюємо кубіт, якщо потрібно, або перед збереженням
                              _manageRoutineCubit.updateScheduledDays(List.from(_selectedDays));
                            });
                          },
                          selectedColor: Theme.of(context).primaryColorLight,
                        );
                      }).toList(),
                    ),

                    const SizedBox(height: 24),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text('Exercises (${currentDisplayRoutine.exercises.length}):', style: Theme.of(context).textTheme.titleMedium),
                        ElevatedButton.icon(
                          icon: const Icon(Icons.add_circle_outline),
                          label: const Text('Add'),
                          onPressed: () async {
                            final RoutineExercise? newExercise = await showAddExerciseToRoutineDialog(context);
                            if (newExercise != null) {
                              _manageRoutineCubit.addExerciseToRoutine(newExercise);
                            }
                          },
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    if (currentDisplayRoutine.exercises.isEmpty)
                      const Padding(
                        padding: EdgeInsets.symmetric(vertical: 16.0),
                        child: Center(child: Text('No exercises added yet. Tap "Add" to begin.')),
                      )
                    else
                      ListView.builder(
                        shrinkWrap: true,
                        physics: const NeverScrollableScrollPhysics(), // Для списку всередині SingleChildScrollView
                        itemCount: currentDisplayRoutine.exercises.length,
                        itemBuilder: (ctx, index) {
                          return _buildExerciseItem(context, currentDisplayRoutine.exercises[index], index);
                        },
                      ),
                  ],
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/routines/presentation/screens/create_edit_routine_screen.dart ===


=== FILE: lib/features/routines/presentation/screens/user_routines_screen.dart ===
--------------------------------------------------
// lib/features/routines/presentation/screens/user_routines_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:firebase_auth/firebase_auth.dart'; // Потрібен для FirebaseAuth.instance
import '../../../../core/domain/repositories/routine_repository.dart'; // Абстракція
import '../cubit/user_routines_cubit.dart';
import '../widgets/routine_list_item.dart';
import 'create_edit_routine_screen.dart';

class UserRoutinesScreen extends StatelessWidget {
  const UserRoutinesScreen({super.key});

  @override
  Widget build(BuildContext context) {
    // Якщо UserRoutinesScreen не надає BlocProvider сам, а очікує його ззовні,
    // то тут BlocProvider не потрібен. Але якщо він його створює, то так:
    return BlocProvider<UserRoutinesCubit>( // Уточнено тип
      create: (context) => UserRoutinesCubit(
        RepositoryProvider.of<RoutineRepository>(context), // Отримуємо з контексту
        FirebaseAuth.instance,
      )..fetchUserRoutines(),
      child: Scaffold(
        // AppBar тут не потрібен, оскільки він є в HomePage
        body: BlocConsumer<UserRoutinesCubit, UserRoutinesState>(
          listener: (context, state) {
            if (state is UserRoutinesError) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('Error: ${state.message}'), backgroundColor: Colors.red),
              );
            }
          },
          builder: (context, state) {
            if (state is UserRoutinesInitial) {
              // Можна викликати fetchUserRoutines, якщо він не був викликаний при створенні кубіта
              // context.read<UserRoutinesCubit>().fetchUserRoutines();
              // Або просто показувати завантаження
              return const Center(child: CircularProgressIndicator());
            }
            if (state is UserRoutinesLoading) {
              return const Center(child: CircularProgressIndicator());
            } else if (state is UserRoutinesLoaded) {
              if (state.routines.isEmpty) {
                return Center(
                  child: Padding(
                    padding: const EdgeInsets.all(20.0),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.list_alt_outlined, size: 60, color: Theme.of(context).colorScheme.primary.withOpacity(0.7)),
                        const SizedBox(height: 16),
                        const Text(
                          'You have no routines yet.',
                          style: TextStyle(fontSize: 18, color: Colors.grey),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 8),
                        const Text(
                          'Create a routine to start organizing your workouts!',
                          style: TextStyle(fontSize: 15, color: Colors.grey),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 24),
                        ElevatedButton.icon(
                          icon: const Icon(Icons.add_circle_outline),
                          label: const Text('Create Your First Routine'),
                          onPressed: () {
                            Navigator.of(context).push(MaterialPageRoute(
                              builder: (_) => const CreateEditRoutineScreen(),
                            ));
                          },
                        )
                      ],
                    ),
                  ),
                );
              }
              return ListView.builder(
                padding: const EdgeInsets.only(top: 8, bottom: 70), // Відступ знизу для FAB
                itemCount: state.routines.length,
                itemBuilder: (context, index) {
                  final routine = state.routines[index];
                  return RoutineListItem(routine: routine);
                },
              );
            } else if (state is UserRoutinesError) {
              return Center(
                 child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Icon(Icons.error_outline, color: Colors.red, size: 48),
                      const SizedBox(height: 16),
                      Text('Failed to load routines: ${state.message}', textAlign: TextAlign.center),
                      const SizedBox(height: 16),
                      ElevatedButton(
                        onPressed: () => context.read<UserRoutinesCubit>().fetchUserRoutines(),
                        child: const Text('Try Again'),
                      )
                    ],
                  ),
                )
              );
            }
            return const Center(child: Text('Press button to load routines or create one.'));
          },
        ),
        floatingActionButton: FloatingActionButton.extended(
          onPressed: () {
            Navigator.of(context).push(MaterialPageRoute(
              builder: (_) => const CreateEditRoutineScreen(),
            ));
            // .then((_) { // Цей .then може бути непотрібним, якщо ManageRoutineCubit оновлює UserRoutinesCubit
            //   // final userRoutinesState = context.read<UserRoutinesCubit>().state;
            //   // if (userRoutinesState is UserRoutinesLoaded) { // Оновлюємо, якщо вже завантажено
            //   //   context.read<UserRoutinesCubit>().fetchUserRoutines();
            //   // }
            // });
          },
          icon: const Icon(Icons.add),
          label: const Text('New Routine'),
          tooltip: 'Create a new routine',
        ),
      ),
    );
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/routines/presentation/screens/user_routines_screen.dart ===


=== FILE: lib/features/routines/presentation/widgets/add_exercise_to_routine_dialog.dart ===
--------------------------------------------------
// lib/features/routines/presentation/widgets/add_exercise_to_routine_dialog.dart
import 'package:flutter/material.dart';
// import 'package:flutter_bloc/flutter_bloc.dart'; // <--- ВИДАЛЕНО, якщо не використовується тут напряму
import '../../../../core/domain/entities/predefined_exercise.dart';
import '../../../../core/domain/entities/routine.dart';
import '../../../exercise_explorer/presentation/screens/exercise_explorer_screen.dart';


Future<RoutineExercise?> showAddExerciseToRoutineDialog(BuildContext context) async {
  final PredefinedExercise? selectedPredefinedExercise = await Navigator.of(context).push<PredefinedExercise>(
    MaterialPageRoute(
      builder: (_) => const ExerciseExplorerScreen(isSelectionMode: true), // <--- ВИПРАВЛЕНО
    ),
  );

  if (selectedPredefinedExercise == null) { // Перевірка mounted не потрібна перед pop
    return null;
  }

  // Подальший код залишається без змін, але переконайся, що `context` для `showDialog` є валідним.
  // Якщо `context` з попереднього екрану вже не валідний, це викличе помилку.
  // Але оскільки ми одразу викликаємо showDialog, він, ймовірно, буде валідним.
  // ignore: use_build_context_synchronously
  if (!context.mounted) return null; // Додаємо перевірку для безпеки

  return await showDialog<RoutineExercise>(
    context: context,
    builder: (dialogContext) {
      final setsController = TextEditingController(text: "3");
      final notesController = TextEditingController();
      final formKey = GlobalKey<FormState>();

      return AlertDialog(
        title: Text('Add "${selectedPredefinedExercise.name}"'),
        content: SingleChildScrollView(
          child: Form(
            key: formKey,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                TextFormField(
                  controller: setsController,
                  decoration: const InputDecoration(labelText: 'Number of Sets'),
                  keyboardType: TextInputType.number,
                  validator: (value) {
                    if (value == null || value.isEmpty) return 'Cannot be empty';
                    final n = int.tryParse(value);
                    if (n == null || n <= 0) return 'Must be a positive number';
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: notesController,
                  decoration: const InputDecoration(
                    labelText: 'Notes (optional)',
                    hintText: 'E.g., focus on form, pyramid sets'
                  ),
                  maxLines: 2,
                ),
              ],
            ),
          ),
        ),
        actions: <Widget>[
          TextButton(
            child: const Text('Cancel'),
            onPressed: () => Navigator.of(dialogContext).pop(null),
          ),
          ElevatedButton(
            child: const Text('Add Exercise'),
            onPressed: () {
              if (formKey.currentState!.validate()) {
                Navigator.of(dialogContext).pop(RoutineExercise(
                  predefinedExerciseId: selectedPredefinedExercise.id,
                  exerciseNameSnapshot: selectedPredefinedExercise.name,
                  numberOfSets: int.parse(setsController.text),
                  notes: notesController.text.trim().isNotEmpty ? notesController.text.trim() : null,
                ));
              }
            },
          ),
        ],
      );
    },
  );
}
--------------------------------------------------
=== END OF FILE: lib/features/routines/presentation/widgets/add_exercise_to_routine_dialog.dart ===


=== FILE: lib/features/routines/presentation/widgets/routine_list_item.dart ===
--------------------------------------------------
// lib/features/routines/presentation/widgets/routine_list_item.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../../../core/domain/entities/routine.dart';
import '../../../../core/domain/repositories/routine_repository.dart'; // <--- ІМПОРТ ІНТЕРФЕЙСУ
import '../cubit/user_routines_cubit.dart';
// ManageRoutineCubit може не знадобитись тут, якщо UserRoutinesCubit обробляє видалення
// import '../cubit/manage_routine_cubit.dart'; 
import '../screens/create_edit_routine_screen.dart';
import 'dart:developer' as developer; // Для логування

class RoutineListItem extends StatelessWidget {
  final UserRoutine routine;

  const RoutineListItem({super.key, required this.routine});

  Future<void> _confirmDelete(BuildContext context) async {
    // Не використовуємо ManageRoutineCubit напряму тут, якщо UserRoutinesCubit має метод видалення.
    // final manageRoutineCubit = BlocProvider.of<ManageRoutineCubit>(context, listen: false);
    final userRoutinesCubit = BlocProvider.of<UserRoutinesCubit>(context, listen: false);

    final bool? confirmed = await showDialog<bool>(
      context: context,
      builder: (BuildContext dialogContext) {
        return AlertDialog(
          title: const Text('Confirm Delete'),
          content: Text('Are you sure you want to delete "${routine.name}"? This action cannot be undone.'),
          actions: <Widget>[
            TextButton(
              child: const Text('Cancel'),
              onPressed: () => Navigator.of(dialogContext).pop(false),
            ),
            TextButton(
              style: TextButton.styleFrom(foregroundColor: Colors.red),
              child: const Text('Delete'),
              onPressed: () => Navigator.of(dialogContext).pop(true),
            ),
          ],
        );
      },
    );

    if (confirmed == true) {
      // Ідеально: UserRoutinesCubit має метод для видалення
      // await userRoutinesCubit.deleteRoutine(routine.id);

      // Поточний варіант: видаляємо через репозиторій та оновлюємо список локально
      // Важливо: переконайся, що context ще валідний після await
      if (!context.mounted) return; 
      try {
        // Отримуємо репозиторій через RepositoryProvider
        final routineRepository = RepositoryProvider.of<RoutineRepository>(context);
        await routineRepository.deleteRoutine(routine.id);
        userRoutinesCubit.routineDeleted(routine.id); // Оновлюємо список локально

        if (context.mounted) { // Знову перевірка
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Routine "${routine.name}" deleted.'), backgroundColor: Colors.green),
          );
        }
      } catch (e) {
        developer.log('Error deleting routine: $e', name: 'RoutineListItem');
        if (context.mounted) { // Перевірка
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error deleting routine: $e'), backgroundColor: Colors.red),
          );
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      child: ListTile(
        title: Text(routine.name, style: const TextStyle(fontWeight: FontWeight.bold)),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (routine.description != null && routine.description!.isNotEmpty)
              Padding(
                padding: const EdgeInsets.only(top: 4.0),
                child: Text(routine.description!, style: Theme.of(context).textTheme.bodySmall),
              ),
            Padding(
              padding: const EdgeInsets.only(top: 4.0),
              child: Text(
                '${routine.exercises.length} exercise(s)',
                style: Theme.of(context).textTheme.bodySmall?.copyWith(color: Colors.grey[600]),
              ),
            ),
            if (routine.scheduledDays.isNotEmpty)
              Padding(
                padding: const EdgeInsets.only(top: 4.0),
                child: Text(
                  'Scheduled: ${routine.scheduledDays.join(", ")}',
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(color: Colors.grey[600]),
                ),
              ),
          ],
        ),
        isThreeLine: (routine.description != null && routine.description!.isNotEmpty) || routine.scheduledDays.isNotEmpty,
        trailing: PopupMenuButton<String>(
          onSelected: (value) {
            if (value == 'edit') {
              Navigator.of(context).push(MaterialPageRoute(
                builder: (_) => CreateEditRoutineScreen(routineToEdit: routine),
              ));
            } else if (value == 'delete') {
              _confirmDelete(context);
            }
          },
          itemBuilder: (BuildContext context) => <PopupMenuEntry<String>>[
            const PopupMenuItem<String>(
              value: 'edit',
              child: ListTile(leading: Icon(Icons.edit), title: Text('Edit')),
            ),
            const PopupMenuItem<String>(
              value: 'delete',
              child: ListTile(leading: Icon(Icons.delete, color: Colors.red), title: Text('Delete', style: TextStyle(color: Colors.red))),
            ),
          ],
        ),
        onTap: () {
          // TODO: Можливо, перехід на екран деталей рутини або початок тренування
          Navigator.of(context).push(MaterialPageRoute(
            builder: (_) => CreateEditRoutineScreen(routineToEdit: routine),
          ));
        },
      ),
    );
  }
}
--------------------------------------------------
=== END OF FILE: lib/features/routines/presentation/widgets/routine_list_item.dart ===


=== FILE: web/index.html ===
--------------------------------------------------
<!DOCTYPE html>
<html>
<head>
  <!--
    If you are serving your web app in a path other than the root, change the
    href value below to reflect the base path you are serving from.

    The path provided below has to start and end with a slash "/" in order for
    it to work correctly.

    For more details:
    * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base

    This is a placeholder for base href that will be replaced by the value of
    the `--base-href` argument provided to `flutter build`.
  -->
  <base href="$FLUTTER_BASE_HREF">

  <meta charset="UTF-8">
  <meta content="IE=Edge" http-equiv="X-UA-Compatible">
  <meta name="description" content="A new Flutter project.">

  <!-- iOS meta tags & icons -->
  <meta name="mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black">
  <meta name="apple-mobile-web-app-title" content="muscle_up">
  <link rel="apple-touch-icon" href="icons/Icon-192.png">

  <!-- Favicon -->
  <link rel="icon" type="image/png" href="favicon.png"/>

  <title>muscle_up</title>
  <link rel="manifest" href="manifest.json">
</head>
<body>
  <script src="flutter_bootstrap.js" async></script>
</body>
</html>

--------------------------------------------------
=== END OF FILE: web/index.html ===


=== FILE: web/manifest.json ===
--------------------------------------------------
{
    "name": "muscle_up",
    "short_name": "muscle_up",
    "start_url": ".",
    "display": "standalone",
    "background_color": "#0175C2",
    "theme_color": "#0175C2",
    "description": "A new Flutter project.",
    "orientation": "portrait-primary",
    "prefer_related_applications": false,
    "icons": [
        {
            "src": "icons/Icon-192.png",
            "sizes": "192x192",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-512.png",
            "sizes": "512x512",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-maskable-192.png",
            "sizes": "192x192",
            "type": "image/png",
            "purpose": "maskable"
        },
        {
            "src": "icons/Icon-maskable-512.png",
            "sizes": "512x512",
            "type": "image/png",
            "purpose": "maskable"
        }
    ]
}

--------------------------------------------------
=== END OF FILE: web/manifest.json ===


================================================================================
Snapshot Complete.
